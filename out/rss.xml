<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Guilherme Ventura]]></title>
        <description><![CDATA[Blog do Guilherme]]></description>
        <link>https://danguilherme.github.io</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Mon, 05 Jul 2021 19:39:56 GMT</lastBuildDate>
        <atom:link href="https://danguilherme.github.io/rss.xml" rel="self" type="application/rss+xml"/>
        <author><![CDATA[[object Object]]]></author>
        <pubDate>Mon, 05 Jul 2021 19:39:43 GMT</pubDate>
        <item>
            <title><![CDATA[Apresentando: Spotivy]]></title>
            <description><![CDATA[<p>Há um tempo atrás eu comprei um carro. Na negociação, fiquei com o aparelho de som. O aparelho tinha DVD embutido, então eu pensei: &quot;pra que ouvir músicas se eu posso ouvir <strong>e</strong> ver?&quot;.</p>
<p>Lembrando que era um aparelho de som <em>em um carro</em>.</p>
<p>Uso o Spotify para ouvir minhas músicas, e por isso criei várias playlists lá. Procurando maneiras de baixar as músicas do serviço de maneira fácil, encontrei uma extensão aqui, um utilitário ali, mas nenhum deles fazia o trabalho completo. Ou encontravam arquivos zoados, ou era muito manual. Como eu queria algo para fazer o download <strong>em lote</strong> (todas as músicas de todas as playlists de uma vez), não encontrei nada que suprisse minhas necessidades. Então decidi construir o meu próprio script.</p>
<h1 id="introdu-o">Introdução</h1>
<p>O <a href="https://github.com/danguilherme/spotivy">Spotivy</a> é um programa de linha de comando escrito em JavaScript (Node.js).
Por isso, para usá-lo você deve ter o <a href="https://nodejs.org/en/download/">Node instalado</a> (qualquer versão acima da v6 está ótima).</p>
<p>Com tudo certo, é só instalar o programa globalmente:</p>
<pre class="highlight"><code class="hljs bash">npm install --global spotivy
</code></pre>
<p>Após a instalação, você já pode verificar os comandos disponíveis pela ajuda do programa:</p>
<pre class="highlight"><code class="hljs bash">spotivy <span class="hljs-built_in">help</span>
</code></pre>
<p>São basicamente dois comandos, um para <a href="#baixar-musica">baixar uma música específica</a> e um para <a href="#baixar-playlist">baixar toda uma playlist</a>.
Mas antes de conseguir baixar, precisamos configurar o programa com as chaves para usar as APIs do Spotify e YouTube.</p>
<h2 id="configura-o">Configuração</h2>
<ol>
<li>Crie uma aplicação no <a href="https://developer.spotify.com/my-applications/">portal de desenvolvedores do Spotify</a>.<ul>
<li>Será fornecido um <em>client ID</em> e um <em>client secret</em>. Guarde-os.</li>
</ul>
</li>
<li>Crie uma <strong>chave de API</strong> para o YouTube (<strong>YouTube Data API v3</strong>) no <a href="https://console.developers.google.com">console de desenvolvedores do Google</a>.</li>
</ol>
<p>Agora você tem duas opções. Passar essas credencias toda vez que for utilizar o programa:</p>
<pre class="highlight"><code class="hljs bash">spotivy user danguilherme --spotify-client-id=clientid --spotify-client-secret=clientsecret --youtube-key=key
</code></pre>
<p>Ou, o que eu recomendo, utilizar o utilitário para criar um arquivo de configuração,
assim você só precisa lembrar delas uma vez:</p>
<pre class="highlight"><code class="hljs bash">spotivy init
</code></pre>
<h2 id="baixar-m-sica">Baixar Música</h2>
<p>Para baixar uma única música do Spotify, é só passar o <strong>id da música</strong> para o comando <code>track</code>:</p>
<pre class="highlight"><code class="hljs bash">spotivy track &lt;track_id&gt;
</code></pre>
<p>Vamos dizer que queremos baixar <a href="https://open.spotify.com/track/1SnIhFaGRO3RXy6tErg2aU">The Trick The Devil Did</a>, de Sick Puppies.
Precisamos seguir os seguintes passos:</p>
<ol>
<li>No Spotify, pego o link da música: <code>open.spotify.com/track/<strong>1SnIhFaGRO3RXy6tErg2aU</strong></code> (é só ir em <code>Compartilhar &gt; Copiar Link da Música</code>)</li>
<li>Desse link conseguimos o id, marcado acima</li>
<li>Então é só fazer o download:<pre class="highlight"><code class="hljs bash">spotivy track 1SnIhFaGRO3RXy6tErg2aU
</code></pre>
</li>
</ol>
<p>Isso vai baixar o video da música do YouTube - um arquivo <code>.mp4</code>.
Se quiser salvar como áudio, é só passar a flag <code>--audio</code> para o programa que ele baixará como <code>.mp3</code>.</p>
<p>Também é possível baixar mais de uma música de uma vez:</p>
<pre class="highlight"><code class="hljs bash">spotivy track 1SnIhFaGRO3RXy6tErg2aU 0lxnk5Fpvhr47m3MFsgFzQ 04zkiHm6WkDZ0eOx3D9oyD --audio
</code></pre>
<p>O comando acima baixará 3 músicas no formato <code>.mp3</code>.</p>
<h2 id="baixar-playlist">Baixar Playlist</h2>
<p>Bom, a ideia ainda era baixar as coisas em lote, e música por música fica inviável, mesmo podendo baixar várias de uma vez.</p>
<p>Para baixar uma playlist completa, utilizamos o comando <code>playlist</code> enviando o <strong>id do dono da playlist</strong> e o <strong>id da playlist</strong>:</p>
<pre class="highlight"><code class="hljs bash">spotivy playlist &lt;user_id&gt; &lt;playlist_id&gt;
</code></pre>
<p>Agora queremos baixar a playlist &quot;<a href="https://open.spotify.com/user/spotify/playlist/37i9dQZF1DWTsQAU8k2LN7">Pop virou Clássico</a>&quot;, do próprio Spotify.
Os passos para baixar uma playlist são parecidos com o que fizemos para baixar uma música:</p>
<ol>
<li>Obtenha o link de compartilhamento: <code>open.spotify.com/user/<strong>spotify</strong>/playlist/<strong>37i9dQZF1DWTsQAU8k2LN7</strong></code> (<code>Compartilhar &gt; Copiar Link da Playlist</code>)</li>
<li>Desse link conseguimos o id tanto do usuário quanto da playlist, ambos marcados acima</li>
<li>E então é só fazer o download:<pre class="highlight"><code class="hljs bash">spotivy playlist spotify 37i9dQZF1DWTsQAU8k2LN7
</code></pre>
</li>
</ol>
<p>Esse comando vai baixar todas as músicas que existem nessa playlist.</p>
<p>Também é possível baixar mais de uma playlist de uma vez:</p>
<pre class="highlight"><code class="hljs bash">spotivy playlist spotify 37i9dQZF1DWTsQAU8k2LN7 37i9dQZF1DXcBWIGoYBM5M 37i9dQZF1DWV1Nj8a6volf --audio
</code></pre>
<p>Esse comando vai baixar três playlists, todas as músicas em <code>.mp3</code>.</p>
<p>Enfim, a funcionalidade mais esperada (por mim): <strong>baixar todas as playlists públicas de um usuário</strong>.
Para fazer isso, é só não passar nenhum id de playlist para o comando:</p>
<pre class="highlight"><code class="hljs bash">spotivy playlist spotify <span class="hljs-comment"># BAIXA TUDO!!1!</span>
</code></pre>
<hr>
<p>É isso. Se quiser usar o utilitário, isso é tudo que você precisa saber.
Existem algumas <a href="https://github.com/danguilherme/spotivy#global-options">opções extras</a>, caso queira mudar a qualidade dos vídeos ou
como eles serão salvos.
Se tiver qualquer problema fazendo a configuração ou usando os comandos,
pode abrir <a href="https://github.com/danguilherme/spotivy/issues">uma issue no GitHub</a>
ou <a href="https://twitter.com/danguilherme/">me contatar diretamente</a>.</p>
<p>Abaixo vou passar com mais detalhes a implementação do programa e
explanar algumas das decisões feitas, então se você é um inspecionador de elemento,
pode se interessar.</p>
<h1 id="por-baixo-dos-panos">Por Baixo dos Panos</h1>
<p>O funcionamento do programa é bem simples, já que o problema que eu queria solucionar também era relativamente simples.
O que é necessário para baixar uma playlist é:</p>
<ol>
<li>Encontrar as músicas que estão contidas nessa playlist</li>
<li>Encontrar o vídeo correspondente no YouTube - em ótima qualidade, de preferência</li>
<li>Baixar o vídeo na resolução adequada para uma pasta no sistema</li>
</ol>
<p>De cara, não parece tão simples (ainda mais com download de arquivo envolvido).
Se eu fosse implementar todo o código para cada etapa eu nem teria começado, mas
que bom que vivemos em um mundo com código aberto (amém GitHub).</p>
<p>Para buscar as músicas existentes em uma playlist, utilizei o projeto <a href="https://github.com/thelinmichael/spotify-web-api-node">spotify-web-api-node</a>.
É um wrapper bem completo que expõe os endpoints da API do Spotify como simples funções, com promise e tudo. Sucesso!</p>
<p>Para encontrar o vídeo perfeito para ser baixado, utilizo <a href="https://github.com/IonicaBizau/youtube-api">outro wrapper</a> para a API do YouTube.</p>
<p>Para baixar o vídeo, utilizo a biblioteca <a href="https://github.com/fent/node-ytdl-core">node-ytdl-core</a>, que me permite passar alguns parâmetros antes do download,
como a qualidade que eu quero ou se eu quero baixar somente a faixa de áudio do arquivo.</p>
<h2 id="encontrando-v-deo-de-qualidade">Encontrando Vídeo de Qualidade</h2>
<p>Para encontrar o vídeo a ser baixado, é feita uma simples busca com <strong>nome do artista</strong> + <strong>nome da música</strong>.
Nisso pode aparecer muita coisa zoada, principalmente vídeos feitos por fãs. Nada contra vídeos feitos por fãs, mas nem sempre a qualidade é a melhor.</p>
<p>Digamos que quero buscar The Trick the Devil Did, de Sick Puppies, novamente. Esse seria o resultado da busca:</p>
<figure>
  <img src="/blog/spotivy/busca-sick-puppies.png" alt="Resultados da busca no YouTube para &quot;Sick Puppies - The Trick The Devil Did&quot;">
  <figcaption>Resultados da busca no YouTube para &quot;Sick Puppies - The Trick The Devil Did&quot;</figcaption>
</figure>

<p>Após alguns testes, fica claro que os resultados de canais afiliados à VEVO ficam na primeira página (na maioria das vezes são o primeiro resultado, como no print).
Por isso, <a href="https://github.com/danguilherme/spotivy/blob/v0.4.2/youtube_search.js#L76-L80">o código</a> dá preferência a resultados que são de canais da VEVO ou de &quot;vídeos oficiais&quot;.
Chamo de &quot;vídeos oficiais&quot; aqueles que têm &quot;official&quot; no título ou no nome do canal. É preciso? Não. Mas dá pro gasto.</p>
<h2 id="utilizando-streams">Utilizando Streams</h2>
<p>Há muito tempo tento entender streams mais a fundo. Que é um fluxo contínuo de dados, onde um pode ser acoplado a outro, já estava bem claro.</p>
<p>Me interessei em usar streams em um código mais trivial após assistir <a href="https://www.youtube.com/watch?v=UD2dZw9iHCc">o vídeo</a> do <a href="https://twitter.com/mpjme">@mpjme</a>. A ideia de fazer as coisas em pedaços, assim que os recursos estão disponíveis, fazendo tarefas menores e mais rápidas faz muito sentido.</p>
<p>Na versão inicial do Spotivy, para fazer o download de uma playlist eram baixadas todas as suas músicas antes de começar o download.
Isso significa que para baixar uma playlist com 120 músicas, por exemplo, a aplicação fazia o download da informação de todas as 120 músicas, página por página, para depois fazer a busca e download dos 120 vídeos. Ilustrando:</p>
<pre class="highlight"><code class="hljs lsl">&gt; busca página <span class="hljs-number">1</span> (<span class="hljs-number">20</span>/<span class="hljs-number">120</span>)
&gt; busca página <span class="hljs-number">2</span> (<span class="hljs-number">40</span>/<span class="hljs-number">120</span>)
&gt; busca página <span class="hljs-number">3</span> (<span class="hljs-number">60</span>/<span class="hljs-number">120</span>)
&gt; busca página <span class="hljs-number">4</span> (<span class="hljs-number">80</span>/<span class="hljs-number">120</span>)
&gt; busca página <span class="hljs-number">5</span> (<span class="hljs-number">100</span>/<span class="hljs-number">120</span>)
&gt; busca página <span class="hljs-number">6</span> (<span class="hljs-number">120</span>/<span class="hljs-number">120</span>)
&gt; download vídeo <span class="hljs-number">1</span>
&gt; download vídeo <span class="hljs-number">2</span>
&gt; download vídeo <span class="hljs-number">3</span>
&gt; ...
</code></pre>
<p>Com streams, podemos fazer o download dos vídeos sob demanda, assim que uma página com informação das músicas forem baixadas, e mantendo a sanidade do código. Ilustrando:</p>
<pre class="highlight"><code class="hljs lsl">&gt; busca página <span class="hljs-number">1</span> (<span class="hljs-number">20</span>/<span class="hljs-number">120</span>)
&gt; download vídeo <span class="hljs-number">1</span>
&gt; download vídeo <span class="hljs-number">2</span>
&gt; ...
&gt; download vídeo <span class="hljs-number">19</span>
&gt; download vídeo <span class="hljs-number">20</span>
&gt; busca página <span class="hljs-number">2</span> (<span class="hljs-number">40</span>/<span class="hljs-number">120</span>)
&gt; download vídeo <span class="hljs-number">21</span>
&gt; download vídeo <span class="hljs-number">22</span>
&gt; ...
</code></pre>
<p>Apesar do <strong>tempo de download ser o mesmo</strong> no final de tudo, a <strong>sensação de fluidez</strong> é inquestionável. E é exatamente o que a gente faz na maioria das melhoras de performance para o usuário. Se o usuário pensa que está rápido, então está rápido.</p>
<p>Usei a biblioteca de streams <a href="https://github.com/caolan/highland">Highland</a>, usada pelo Mattias em seu vídeo, para facilitar o desenvolvimento.
A maior parte da mágica está no <a href="https://github.com/danguilherme/spotivy/blob/v0.4.2/spotify.js#L75-L76">código de paginação</a> da busca no Spotify mesmo.</p>
<h2 id="interface-de-linha-de-comando">Interface de Linha de Comando</h2>
<p>Para fechar as dependências, usei o <a href="https://github.com/mattallty/Caporal.js">Caporal</a> para auxiliar no recebimento dos comandos, argumentos e opções do programa no terminal. Bem simples de usar.</p>
<hr>
<p>E foi assim que o Spotivy foi concebido. Esse é meu primeiro projeto open-source que considero realmente finalizado - totalmente funcional e documentado. Espero que não demore tanto para o próximo sair.</p>
]]></description>
            <link>https://danguilherme.github.io/blog/spotivy/</link>
            <guid isPermaLink="true">https://danguilherme.github.io/blog/spotivy/</guid>
            <dc:creator><![CDATA[[object Object]]]></dc:creator>
            <pubDate>Wed, 04 Oct 2017 20:40:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[VanHackathon 2017 - O Hackathon Sem Fronteiras]]></title>
            <description><![CDATA[<p><em>
<a rel="alternate" href="https://medium.com/@danguilherme/vanhackathon-2017-the-hackathon-without-borders-4324e23d767a" hreflang="en" data-ga-label="read-in-other-lang">Read the English version on Medium.</a>
</em></p>
<hr>
<p>Nesse último final de semana aconteceu o <a href="http://vanhack.com/hackathon" title="VanHackathon">VanHackathon</a>, um hackathon para conectar talentos com oportunidades em diversos países. O evento começou na sexta-feira, dia 7 de abril, às 19h, e terminou no mesmo horário do domingo.</p>
<p>Empresas como <a href="https://booking.com/">Booking</a>, <a href="https://www.thinkific.com/">Thinkific</a> e a própria <a href="http://www.vanhack.com/">VanHack</a> criaram seus desafios e auxiliaram os desenvolvedores no desenvolvimento durante as 48 horas de evento.</p>
<figure>
  <img src="/blog/vanhackathon-2017/booking-challenge.png" alt="Desafio da Booking">
  <figcaption>O desafio da booking na procura por desenvolvedores back-end</figcaption>
</figure>

<p>Os times foram formados basicamente pelo <a href="https://vanhackathon.slack.com">Slack</a>, canal onde os vanhackers se comunicam. Algumas pessoas já se conheciam e até programaram lado a lado nesses dois dias, mas esse não foi meu caso.</p>
<p>Meu time foi montado na segunda-feira da semana do hackathon: <a href="http://fparreira.com/"><em>fparreira</em></a>, desenvolvedor PHP, e <a href="https://mc9-dev.com/"><em>mc9</em></a>, designer e desenvolvedora full stack. Comigo como desenvolvedor front-end, nosso time estava completo. Fizemos uma reunião na quinta pra nos conhecermos e alinhar nossas ideias, e acredito que encontrar pessoas com as expectativas mais alinhadas era impossível!</p>
<p>Na sexta, nas primeiras horas do evento ficamos sabendo que nosso <em>back-ender</em> não ia poder entrar por problemas de saúde... Aí bate o desespero.</p>
<figure>
  <img src="/blog/vanhackathon-2017/bob-esponja-desesperado.gif" alt="Ficamos desesperados">
  <figcaption>É Bob, sei como é fazer hamburgueres na correria...</figcaption>
</figure>

<p>Depois dos breves minutos de choro na posição fetal, ainda escolhemos <a href="http://app.vanhack.com/Challenges/Details?id=37">um dos desafios mais difíceis</a> pra fazer. O desafio não era muito técnico, já que foi aconselhado usar tecnologias JavaScript de ponta a ponta (Node e MongoDB no back, AngularJS no front), mas o <strong>negócio era muito específico</strong>. Tínhamos que desenvolver um aplicativo de investimento com um funcionalidades sociais, onde as pessoas poderiam ver o que outros investidores estão fazendo (incluindo investidores profissionais) e até imitar suas ações no sistema.</p>
<blockquote>
<ul>
<li><em>Por onde começar?</em></li>
<li><em>Como funciona esse mundo de investimentos?</em></li>
<li><em>O que usuários desse tipo de aplicação esperam?</em></li>
<li><em>Teríamos acesso a que tipo de informação?</em></li>
</ul>
</blockquote>
<p>Essas eram só algumas das muitas perguntas que tínhamos, e algumas nós nem sabíamos como formular. Mas mesmo assim escolhemos esse projeto por encaixar no nosso time (mesmo na busca por outro desenvolvedor back-end), pelo tamanho do desafio que ele nos traria e sua utilidade—eu nunca ouvi falar de uma aplicação do ramo que tenha essa veia social, que sempre agrega em um serviço.</p>
<p>Estudamos sobre o negócio, tiramos algumas dúvidas com o pessoal da empresa (sempre muito atenciosos, obrigado!) e então resolvemos colocar a mão na massa. A Carol foi dormir porque já não tinha dormido aquela noite, e eu fui adiantar as coisas no back-end, aprendendo Mongo no caminho.</p>
<p>No outro dia, um pouco desanimado, comuniquei novamente que precisava de um dev Node.js, e eis que me aparece <a href="https://github.com/malikid"><em>mak_chang</em></a>, um dev que agregou <strong>e muito</strong> no time. Sem exageros. Entendeu do negócio muito rápido, ajudou nos mock-ups e programou as APIs no back-end. O projeto foi salvo!</p>
<figure>
  <img src="/blog/vanhackathon-2017/yeah.gif" alt="Ficamos aliviados">
  <figcaption>Agora vai!</figcaption>
</figure>

<p>No fim, foi desenvolvido um <strong>protótipo funcional</strong>, para mostrar a ideia que tínhamos de um sistema de investimento mais social. No domingo, às 18 horas e 58 minutos, submeti o projeto na plataforma.</p>
<p><blockquote class="twitter-tweet" data-lang="pt"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/vanhackathon?src=hash">#vanhackathon</a>: done. Don&#39;t know what to say, great event!<br>In 48 hrs of event, slept 8. Can&#39;t even think anymore. Thanks <a href="https://twitter.com/GoVanHack">@GoVanHack</a>!</p>&mdash; Guilherme Ventura (@danguilherme) <a href="https://twitter.com/danguilherme/status/851219163381157888">9 de abril de 2017</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>A principal lição aprendida (relembrada) nessas 48 horas foi que <strong>problemas de negócio são muito mais importantes que problemas técnicos</strong>. Nós nos preocupamos muito com isso, mas isso evidenciou que o que move o sistema é o negócio, não a linguagem em que é desenvolvido (isso é uma nota para mim mesmo, ainda tenho dificuldade em separar uma coisa da outra).</p>
<p>Outra coisa importante: em um hackathon, não escolha projetos com regras de negócio obscuras, pois isso vai atrapalhar sua performance. E caso suas regras sejam muito complexas (mesmo que você as entenda perfeitamente), corte-a, implemente somente as partes mais importantes. É um hackathon, mostre mocks onde não há informações cruciais, <strong>foque nas funcionalidades que diferenciam sua solução</strong>. Isso é o básico de um hackathon, mas é sempe bom lembrar né.</p>
<hr>
<p>Foi uma ótima experiência, e mal posso esperar para o próxmo! Nosso projeto está no ar, pra quem quiser ver:</p>
<ul>
<li>Back-end: <a href="https://github.com/the-artisans/buzzer-back" target="_BLANK">https://github.com/the-artisans/buzzer-back</a></li>
<li>Front-end: <a href="https://github.com/the-artisans/buzzer-front" target="_BLANK">https://github.com/the-artisans/buzzer-front</a></li>
<li>Website: <a href="http://buzzerapp.surge.sh/" target="_BLANK">http://buzzerapp.surge.sh/</a> <em>(lembre-se, protótipo funcional)</em> 😄</li>
</ul>
<p>Aproveite e <a href="http://app.vanhack.com/Challenges">veja os desafios que estavam disponíveis</a>, são bem interessantes e é sempre bom praticar!</p>
<hr>
<p><strong>Dica de amigo:</strong> A VanHack—empresa organizadora do evento, que conecta talentos com oportunidades de fora—tá com uma super promoção no <a href="http://vanhack.com/premium">pacote premium</a> deles até a próxima quinta, 13/04. Nele você tem aulas de inglês com professores nativos, revisão de currículo, <em>cover letter</em>, e uma comunidade bem bacana, tudo a $45,00 por mês (dólares canadenses, claro). Se pensa em ter experiências diferentes, <a href="http://vanhack.com/premium">dá uma olhada lá</a>. Eu me cadastrei hoje mesmo! o/</p>
]]></description>
            <link>https://danguilherme.github.io/blog/vanhackathon-2017/</link>
            <guid isPermaLink="true">https://danguilherme.github.io/blog/vanhackathon-2017/</guid>
            <dc:creator><![CDATA[[object Object]]]></dc:creator>
            <pubDate>Tue, 11 Apr 2017 15:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Introdução ao Termux]]></title>
            <description><![CDATA[<style>
  .asciicast {
    text-align: center;
  }

  .asciicast iframe {
    max-width: 100%;
  }
</style>

<script type="text/javascript" src="https://asciinema.org/a/5y8vieg02u61epwjsi6gckevu.js" async
        id="asciicast-5y8vieg02u61epwjsi6gckevu"
        data-autoplay="1"
        data-loop="1"
        data-speed="4"></script>

<p>Atualmente, podemos fazer de tudo a partir de um telefone celular: pagar contas, pedir comida,
chamar um motorista particular e, pasmem, ligar para pessoas de qualquer lugar do mundo
(tarifas podem ser cobradas™).</p>
<p>Adicione mais uma funcionalidade na imensa lista: <strong>desenvolver software</strong>.
Como um verdadeiro terminal portátil, o <a href="https://termux.com/">Termux</a> te permite fazer isso e muito mais,
trazendo grande parte dos utilitários que utilizamos em qualquer sistema Unix para a palma da mão,
como <code>cat</code>, <code>grep</code> e <code>vim</code>, e também ferramentas como Node e <abbr title="Interactive Ruby">irb</abbr> (Ruby).</p>
<p>Nesse post introdutório, vou apresentar como instalar e tirar o melhor proveito desse terminal.</p>
<h2 id="instalando-o-termux">Instalando o Termux</h2>
<p>Baixe e instale o <a href="https://play.google.com/store/apps/details?id=com.termux">app pela Google Play</a>.</p>
<p>Por ser viciado em atalhos, senti a necessidade de um teclado mais <em>hackudo</em> para mexer no terminal.
Creio que não fui o único, pois existe o <a href="https://play.google.com/store/apps/details?id=org.pocketworkstation.pckeyboard">Hacker&#39;s Keyboard</a>,
um teclado com teclas exclusivas para <code>ctrl</code>, <code>alt</code>, <code>shift</code>, e outras coisas que você encontra em
um teclado físico convencional.
Apesar das <a href="https://termux.com/touch-keyboard.html">teclas de atalho do Termux</a>,
ainda o acho melhor para mexer no terminal.</p>
<p>Ao abrir o aplicativo, execute os seguintes comandos no terminal:</p>
<pre class="highlight"><code class="hljs bash">$ apt update
</code></pre>
<p>Esse comando atualiza o índice de pacotes do gerenciador, então ele deve ser executado assim que
o app é instalado, e também com uma certa frequência durante o uso no dia a dia.</p>
<h2 id="configurando-o-terminal">Configurando o Terminal</h2>
<p>Após a execução do <code>apt update</code>, é comum a execução do seguinte comando:</p>
<pre class="highlight"><code class="hljs bash">$ apt upgrade
</code></pre>
<p>O <code>apt upgrade</code> atualiza os pacotes instalados de acordo com sua versão atualizada no índice.</p>
<p>Não se preocupe quanto à banda de internet, o Termux sempre confirma se você tem certeza de fazer
o download antes de fazê-lo, mostrando quantos MB serão baixados.</p>
<p>Agora podemos começar a instalar pacotes.
O único pacote <strong>essencial</strong> que precisamos instalar é o <code>coreutils</code>.
Esse pacote provê alguns comandos básicos do shell que a maioria dos scripts por aí afora utilizam
(como o Rails).</p>
<pre class="highlight"><code class="hljs bash">$ apt install coreutils
</code></pre>
<script type="text/javascript" src="https://asciinema.org/a/910jufnkdx9al67jqndwsis2a.js" async
        id="asciicast-910jufnkdx9al67jqndwsis2a"
        data-autoplay="0"
        data-loop="0"
        data-speed="3"></script>

<h2 id="armazenamento">Armazenamento</h2>
<p>Existem três tipos de <a href="https://termux.com/storage.html">armazenamento no Termux</a>:</p>
<ol>
<li><strong>Armazenamento do aplicativo:</strong> É onde você está quando inicia o Termux (valor da variável <code>$HOME</code>).</li>
<li><strong>Armazenamento interno compartilhado:</strong> Armazemanto disponível para todos os apps, no dispositivo.</li>
<li><strong>Armazenamento externo:</strong> Armazenamento no cartão de memória.</li>
</ol>
<p>Para facilitar na navegação entre essas áreas, recomendo a execução do seguinte comando:</p>
<pre class="highlight"><code class="hljs bash">$ termux-setup-storage
</code></pre>
<p>Esse comando, <a href="https://termux.com/storage.html">como explicado na documentação</a>, garante a permissão de leitura
de arquivos e cria a pasta <code>$HOME/storage</code>. O conteúdo dessa pasta são vários atalhos para armazenamentos do sistema,
entre eles:</p>
<ul>
<li><code>~/storage/shared</code><br>
A raíz do <strong>armazenamento interno compartilhado</strong>.</li>
<li><code>~/storage/external</code><br>
A raíz do <strong>armazenamento externo</strong>, se houver.</li>
</ul>
<h2 id="hello-world">Hello World</h2>
<p>Agora que está tudo certo, vamos ver se isso é um terminal de verdade usando o clássico pacote <code>cowsay</code>:</p>
<pre class="highlight"><code class="hljs bash">$ apt install cowsay
$ cowsay <span class="hljs-string">"Olá, Termux"</span>
</code></pre>
<script type="text/javascript" src="https://asciinema.org/a/bsdiuvltg2wt4voqqe6m5aeyl.js" async
        id="asciicast-bsdiuvltg2wt4voqqe6m5aeyl"
        data-autoplay="0"
        data-loop="0"
        data-t="40"
        data-speed="6"></script>

<p>Funciona que é uma beleza.</p>
<p><em>Ao infinito e além!</em></p>
<pre class="highlight"><code class="hljs bash">apt install git node ruby <span class="hljs-comment"># ...e o que mais você quiser!</span>
</code></pre>
<p>É só instalar e começar a usar.</p>
<hr>
<p>Seja no caminho do trabalho, ou pra checar aquele comando na hora do almoço (quem nunca?),
você pode recorrer ao Termux sempre que precisar, e ele dificilmente te deixará na mão.
Já consegui criar e subir uma aplicação Rails no celular, testando no próprio navegador.
É lindo cara.</p>
<p>Espero ter feito uma boa introdução ao Termux, pois acredito que esse é um daqueles apps que vale
a pena compartilhar com os coleguinhas.
Esse post foi inspirado em um post do <a href="https://www.freecodecamp.com/">Free Code Camp</a>:
<a href="https://medium.freecodecamp.com/building-a-node-js-application-on-android-part-1-termux-vim-and-node-js-dfa90c28958f#.4y05h2orc">Building a Node.js application on Android - Part 1: Termux, Vim and Node.js</a>.</p>
]]></description>
            <link>https://danguilherme.github.io/blog/introducao-ao-termux/</link>
            <guid isPermaLink="true">https://danguilherme.github.io/blog/introducao-ao-termux/</guid>
            <dc:creator><![CDATA[[object Object]]]></dc:creator>
            <pubDate>Wed, 14 Dec 2016 19:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Página de exemplo]]></title>
            <description><![CDATA[<ul>
<li>Lang: pt-br</li>
<li>Lang from URL: pt-br</li>
<li>Translation: /blog/pagina-de-exemplo/</li>
<li>Has Portuguese: true</li>
<li>Has English: true</li>
<li>Other languages: {&quot;en&quot;:&quot;/en/blog/example-page/&quot;}</li>
</ul>
<hr>

<h1>Polyglot <small></small></h1>



<h2>Pt-br</h2>

  <ul>

    <li>Guilherme Ventura : /</li>

    <li> : /pt-br.json</li>

    <li>Quem sou eu? : /sobre/</li>

    <li>Chrome é Mesmo o Novo IE? : /blog/chrome-novo-ie/</li>

    <li>Blog : /blog/</li>

    <li>Afinal, o que é o Polymer? : /blog/o-que-realmente-e-o-google-polymer/</li>

    <li>Introdução ao Termux : /blog/introducao-ao-termux/</li>

    <li>Página de exemplo : /blog/pagina-de-exemplo/</li>

    <li>1º Hackathon de Campinas: Eu Fui! : /blog/primeiro-hackathon-campinas/</li>

    <li>VanHackathon 2017 - O Hackathon Sem Fronteiras : /blog/vanhackathon-2017/</li>

    <li>Apresentando: Spotivy : /blog/spotivy/</li>

    <li> : /scripts/blog-post.js</li>

    <li> : /scripts/danguilherme.js</li>

    <li> : /scripts/google-analytics.js</li>

    <li> : /scripts/home.js</li>

    <li> : /scripts/main.js</li>

    <li> : /scripts/triple-click.js</li>

    <li> : /styles/_helpers.css</li>

    <li> : /styles/_hover.scss</li>

    <li> : /styles/_theme.css</li>

    <li> : /styles/_mixins.css</li>

    <li> : /styles/_variables.css</li>

    <li> : /styles/about.css</li>

    <li> : /styles/blog-post.css</li>

    <li> : /styles/blog.css</li>

    <li> : /styles/home.css</li>

    <li> : /styles/print.css</li>

    <li> : /styles/style.css</li>

    <li>Example page : /en/blog/example-page/</li>

    <li>Blog : /en/blog/</li>

    <li> : /demo.html</li>

    <li> : /base.html</li>

    <li> : /blog-post.html</li>

    <li> : /page.html</li>

    <li> : /contact-form.html</li>

    <li> : /disqus.html</li>

    <li> : /footer.html</li>

    <li> : /document-metadata-export.html</li>

    <li> : /head-content.html</li>

    <li> : /header.html</li>

    <li> : /google-analytics.html</li>

    <li> : /menu.html</li>

    <li> : /see-demo.html</li>

    <li> : /posts-list.html</li>

    <li> : /seo.html</li>

    <li> : /translated-link.html</li>

  </ul>


<h2>En</h2>

  <ul>

    <li> : /en/en.json</li>

    <li>Who Am I? : /en/about-me/</li>

    <li>Guilherme Ventura : /en/</li>

  </ul>
]]></description>
            <link>https://danguilherme.github.io/blog/pagina-de-exemplo/</link>
            <guid isPermaLink="true">https://danguilherme.github.io/blog/pagina-de-exemplo/</guid>
            <dc:creator><![CDATA[[object Object]]]></dc:creator>
            <pubDate>Wed, 14 Dec 2016 19:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[1º Hackathon de Campinas: Eu Fui!]]></title>
            <description><![CDATA[<p>Nesse fim de semana, dias 6 e 7 de março, aconteceu o 1° Hackathon da cidade de Campinas, com 24 horas seguidas de programação intensa, com pessoas desconhecidas, e com certeza eu não queria estar fora dessa!</p>
<p>O evento foi realizado pela <a href="https://ima.sp.gov.br/">IMA</a> com apoio da <a href="http://sensedia.com/">Sensedia</a>, empresas sediadas em Campinas. A Sensedia eu já conhecia de outros eventos, além de ser uma empresa que nasceu da empresa onde trabalho atualmente, CI&amp;T. Eu me perguntava mesmo quem era IMA. <em>Informática de Municípios Associados.</em> Ok, mas o que eles fazem? Pelo que entendi, eles são responsáveis por toda a infraestrutura digital de Campinas. Todos os sistemas e dados, são desenvolvidos e arquitetados por eles - são aproximadamente 800 funcionários, ~200 só na área de tecnologia. Pois é, eu deveria conhecê-los.</p>
<p>Vou tentar descrever cada detalhe do evento: o antes, o durante e um pouquinho do depois. Espero que você curta e se sinta um dos maratonistas. Parece que me empolguei bastante na hora de escrever esse texto, virou até um dossiê. Caso você seja como qualquer outro usuário da internet que não gosta de ler textos longos, aqui vai um breve índice. Sinta-se livre para pular para qualquer parte do texto!</p>
<ul>
<li><a href="#do-conhecimento-do-hackathon">Como fiquei sabendo do evento</a></li>
<li><a href="#a-inscri-o">Processo de inscrição</a></li>
<li><a href="#o-evento">O hackathon!</a></li>
<li><a href="#encerramento">Encerramento/premiações</a></li>
</ul>
<h2 id="do-conhecimento-do-hackathon">Do Conhecimento do Hackathon</h2>
<p>Antes de mais nada, acho interessante compartilhar como fiquei sabendo do evento. Há muito tempo atrás, depois de ter participado do meu primeiro hackathon (e ter curtido bastante!), criei um <a href="https://www.google.com.br/alerts">alerta no Google</a> para me notificar sempre que a expressão &quot;Hackathon Campinas&quot; fosse encontrada. Ele não me trouxe nada até meados de janeiro, quando recebi a notícia do 1º Hackathon Campinas (não lembro da onde), e me inscrevi. Já adicionei uma entrada somente com a palavra &quot;Hackathon&quot;, pra ampliar a busca!</p>
<h2 id="a-inscri-o">A inscrição</h2>
<p>A inscrição tinha que ser feita num bom e velho Google Form. Pelo que me lembro, tínhamos que pôr o nome, idade e um resumo da nossa experiência profissional, onde éramos avisados de que haveria uma pré-seleção. Eu preenchi o form normalmente, sem muitas expectativas - procuro não gerar expectativa à toa!</p>
<p>Como eu não conhecia a IMA no momento, sinceramente eu estava pensando que o hackathon ia ser bem meia boca no quesito organização, mas vou falar disso mais pra frente nesse artigo. Já me adianto que <strong>subestimei completamente a organização do evento</strong>.</p>
<p>Eis que dia 17 de fevereiro recebi um email com o assunto &quot;<strong>Parabéns, você foi selecionado para o Hackathon Campinas!</strong>&quot;. Só alegria! No email, fomos informados dos prêmios para as equipes vencedoras:</p>
<ul>
<li>1º Lugar: <strong>R$ 6.000,00</strong> - R$ 1.500,00/participante</li>
<li>2º Lugar: <strong>R$ 4.000,00</strong> - R$ 1.000,00/participante</li>
<li>3º Lugar: <strong>R$ 2.000,00</strong> - R$ 500,00/participante</li>
</ul>
<p>Na verdade, esses números estavam no regulamento, mas sabe aquela parte do &quot;<strong>Eu li e aceito os termos...</strong>&quot;? Pois é. Só fui ler depois de ter sido selecionado.</p>
<p>Também fomos instruídos a pagar a inscrição, que era de <strong>R$ 35,00</strong>, o preço de uma <strong>caixa de leite</strong>. Literalmente, pois o valor da inscrição era para doar caixas de leite para instituições de caridade locais, pagos por nós participantes e inteirado pela própria IMA (infelizmente não lembro os valores exatos agora, mas foram três instituições beneficiadas). Isso, para mim, foi um grande ato de responsabilidade social, além de mostrar que eles não estavam atrás de lucro no evento (além das ideias de apps desenvolvidos durante ele), mostraram que se preocupam com a sociedade em que vivemos.</p>
<h3 id="conhecendo-a-equipe">Conhecendo a Equipe</h3>
<p>Fomos apresentados aos nossos parceiros de equipe na segunda-feira antes do final de semana do hackathon (dia 29 de fevereiro). Ao mesmo tempo, eles liberaram o que parecia ser o protótipo da API REST: conseguíamos requisitar os dados (se não fossem recursos filhos), mas os filtros não funcionavam. Mas correu tudo bem, conseguimos discutir sobre a API e os dados que ela fornece.</p>
<p>Em pouco mais de uma hora e meia de reunião, divididas em dois dias, conseguimos nos conhecer um pouco melhor e ter uma ideia do que poderíamos fazer no dia do evento.</p>
<h2 id="o-evento">O Evento</h2>
<p>No sábado, 5 de março, acordei atrasado, pra variar. O último email de contato informava, em negrito, que esperava todos os participantes <strong>às 08:00h</strong>. Mas deu tudo certo, o teatro da IMA, onde aconteceu todo o evento, tinha transporte rápido e fácil partindo da rodoviária, cheguei 08:20 e ainda deu tempo de tomar um café.</p>
<h3 id="recep-o">Recepção</h3>
<p>Chegando no local, todo mundo muito educado, sorridente e feliz, apesar de ser oito horas da manhã de um sábado. Só eu que não gosto de acordar cedo no fim de semana? Ok, não é. Naquela hora até eu tava feliz.</p>
<p>O credenciamento não demorou nem um minuto, talvez pelo fato de eu ser o único chegando naquele horário. Junto do meu crachá de desenvolvedor, recebi um pote de pipoca com três Torcidas (o salgadinho) e a camiseta do evento, muito bonita por sinal. Aliás, a organização das pessoas estava assim:</p>
<ul>
<li><strong>Camiseta branca: maratonistas</strong>.</li>
<li><strong>Camiseta grená: senseis</strong>. Auxiliavam tanto em dúvidas técnicas quanto de negócio. Haviam 2 ou 3 profissionais da Sensedia e o resto era da IMA (pelo menos na hora que eu perguntei).
(Juro que não sabia que o nome da cor era grená, foi o que nos falaram na hora de descrever quem eram os senseis. Quem reconhece essa cor de primeira, por favor se manifeste. Se você não sabe, <a href="https://pt.wikipedia.org/wiki/Gren%C3%A1">isso é grená: #831D1C</a>.)</li>
<li><strong>Camiseta preta: staff</strong>. Toda a equipe. Quem não era sensei, maratonista ou visitante, estava de preto. Não sei, mas parece que vi um tipo de hierarquia ali, pois algumas mangas de camiseta tinha um desenho e outras não. Mas chega uma altura que a gente não confia mais na própria visão.</li>
</ul>
<p><blockquote class="twitter-tweet" data-lang="en"><p lang="pt" dir="ltr">Hackathon IMA começando! <a href="https://t.co/EVGWxybGyc">pic.twitter.com/EVGWxybGyc</a></p>&mdash; Guilherme Ventura (@danguilherme) <a href="https://twitter.com/danguilherme/status/706083785889157120">March 5, 2016</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>A abertura foi no teatro, e depois da apresentação inicial, feita por representantes da IMA e da Sensedia, com todas aquelas coisas que a gente já conhece bem, subimos umas escadas e chegamos a um escritório repleto de baias.</p>
<p><img src="/blog/primeiro-hackathon-campinas/local.jpeg" alt="Baias da IMA onde aconteceu o hackathon" title="Espaço para a programação das soluções"></p>
<p>Estava tudo muito bem organizado, cada baia com identificação de qual grupo acomodaria, com ponto de rede, filtro de linha e cadeiras confortáveis.</p>
<p>Dentro do pote de pipoca, tinha muito mais do que Torcida. Era Club Social, bolo Ana Maria, biscoito, Polenguinho... Sem contar os vale-lanches, sucos e refrigerantes que nos deram. Estou comendo os snacks até hoje!</p>
<p><blockquote class="twitter-tweet" data-lang="en"><p lang="pt" dir="ltr">Só na correria no <a href="https://twitter.com/hashtag/hackathon?src=hash">#hackathon</a>, mas fome nóis num passa <a href="https://t.co/irsDYaeLug">pic.twitter.com/irsDYaeLug</a></p>&mdash; Guilherme Ventura (@danguilherme) <a href="https://twitter.com/danguilherme/status/706250429680713729">March 5, 2016</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h3 id="c-digo">Código</h3>
<p>Depois de receber nossas senhas individuais para acesso à rede wifi, eu e meu time sentamos para conversar sobre a nossa ideia. Após muita conversa, acabamos com duas ideias que achamos muito boas, e deixamos para nossos usuários finais decidirem o que faríamos. Um de nós saiu para a rua, aproveitando que tínhamos a liberdade para ir aonde quiséssemos no evento, para fazer uma pesquisa de campo. No retorno, houve uma vitória de 6 a 9 para uma das ideias, e então começamos a desenvolvê-la.</p>
<p>Não vou entrar nos detalhes do projeto agora, pois ainda não sei se daremos continuidade nele. Com certeza farei um post muito detalhista sobre os dois dias de hackathon, mas creio que só na próxima semana.</p>
<p>Para o desenvolvimento, fiquei com a responsabilidade de desenvolver o back-end em Ruby, enquanto outros dois membros do time trabalhavam no front-end em Ionic, bem próximo ao designer. Nós tivemos grande entrosamento como time, mas eu senti que esse entrosamento foi se perdendo ao longo do evento, mais no caso de entregar as soluções. Uma coisa que acho que faltou foi comunicação. Mas enfim, isso é coisa que quero cobrir no outro post.</p>
<p><img src="/blog/primeiro-hackathon-campinas/time.jpeg" alt="Minha equipe no evento" title="Meu time! Da esquerda pra direita: Will, Júlio, Ícaro e eu"></p>
<p>Tínhamos frutas à disposição, acesso à lanchonete, podíamos andar pra onde quiséssemos, sem problema nenhum. Em algum momento da tarde, passou uma garota distribuindo RedBulls pra todos, e olha... a produtividade do pessoal caiu, no mínimo, uns 85%. Peço encarecidamente à RedBull para que patrocine mais eventos que eu participe! Só um pedido, sem nada de mais. Depois da meia-noite, membros da equipe passavam distribuindo frutas, achocolatados, água, entre outras coisas. Acho que era pra evitar o desperdício, mas nem ligo, eu já estava me sentindo mimado.</p>
<p>O dia ia amanhecendo e o tempo para finalizar o app acabando. Eu podia ouvir ao fundo a voz da mulher do tradutor do Google, e alguma pessoa da sala respondendo as perguntas dela. Era muito interessante. Estranho que só comecei a ouvir a voz dela de manhã, então parecia que não testaram muito o que quer que tinham desenvolvido. Enfim, chegou as 09:00 e o dia de desenvolvimento acabou.</p>
<h2 id="encerramento">Encerramento</h2>
<p>Todos nós descemos para o teatro. Todo mundo cansado, com cara de mau, tentando manter o olho aberto. A partir daqui, o que eu escrever pode ser meia verdade porque, nessa hora, depois de ter parado de trabalhar e estar sentado no banco do teatro sem fazer nada além de olhar para o palco, fiquei bêbado de sono, então posso ter deixado algo passar.</p>
<p>Assistimos a todas as apresentações, cada uma com cinco minutos para apresentar a ideia e outros cinco para a banca julgadora fazer as perguntas—só não me pergunte os nomes dos jurados, os únicos que me lembro eram os presidentes da Sensedia e da IMA, Marcilio Oliveira e Fábio Pagani (sim, das únicas empresas que citei aqui!), mas também haviam representantes da cidade de Campinas.</p>
<p>Todas as ideias eram muito boas, era uma apresentação melhor que a outra. O fim de cada apresentação era marcado com uma música pelo &quot;MC&quot;, e aí começavam as perguntas dos jurados, que perguntaram desde &quot;vocês já pensaram em como implementar essa solução no mundo real?&quot; até &quot;pensaram em expandir essa solução para outros municípios além de Campinas?&quot;.</p>
<p><img src="/blog/primeiro-hackathon-campinas/fim.jpeg" alt="Apresentação da equipe &quot;Cidade Acessível&quot;" title="Apresentação da equipe &#39;Cidade Acessível&#39;"></p>
<p>Fomos o quarto ou quinto grupo a se apresentar e, apesar de ter sido uma apresentação muito boa, não conseguimos mostrar um app funcional—ele demorou para carregar os dados do serviço e achamos melhor apresentar os layouts criados pelo designer, aproveitando nossos preciosos cinco minutos e o fato de termos uma ideia bem concreta do que seria nossa solução e o que ela traria de benefícios para a cidade. Infelizmente, isso não foi o suficiente.</p>
<p>Depois de todos terem se apresentado, houve uma pausa. Fomos tomar um ar, pegar um sol depois de passsar a noite toda acordados. Uns 30 minutos depois voltamos ao teatro, e daí começou uma verdadeira cerimônia. Um cara desconhecido (pelo menos para mim) com jeito, voz e frases de apresentador tomou conta do microfone. Todo animado, com jeitão de apresentador de programa da tarde de domingo, fazendo piadas e tentando animar o público que estava dormindo sentado. Haviam mais pessoas no teatro além da gente, acho que eram algumas pessoas importantes e alguns familiares, mas pra gente foi só enrolação. Ouvimos discursos de uns três secretários, do presidente da IMA, e por fim, do prefeito de Campinas, Jonas Donizette, que desandou a falar. Eram palavras bonitas, sim, de motivação. Que estávamos lá para &quot;fazer a diferença&quot;, que quem muda a cidade é o cidadão e etc. Mas o que todos nós queríamos saber mesmo era quem tinha ganhado! Estávamos exaustos e ansiosos, desculpe, nada pessoal.</p>
<p>Enfim, chegou o momento. <a href="http://correio.rac.com.br/_conteudo/2016/03/campinas_e_rmc/416903-aplicativo-mapeia-area-de-contagio-da-dengue-e-zika.html">A equipe vencedora desenvolveu um sistema para alertar as pessoas sobre riscos de doenças contagiosas em determinada região.</a> A apresentação foi impecável. O grupo começou evitando o <em>cliché</em> de falar sobre a dengue, pelo menos diretamente, falando sobre doenças contagiosas, como caxumba e raiva. Foi explicado todo o processo de diagnóstico de um paciente, mostrando como o grupo pretendia coletar as informações necessárias para fazer o aplicativo funcionar. Não lembro de eles terem mostrado um protótipo funcional, mas lembro de ver um mapa com um range que mostrava se o local que a pessoa está no momento estava em risco e com alguns pins onde casos foram registrados. A ideia era realmente muito boa.</p>
<p>Em segundo lugar, ficou o grupo da mulher do tradutor, denominado <em>Cidade Acessível</em>. A solução dos caras foi fazer o portal da prefeitura totalmente acessível aos deficientes visuais, com comandos de voz e atendimento personalizado.</p>
<p>Em terceiro, ficou o grupo que fez alguns gráficos para mostrar as informações de despesas e receitas da cidade. Esses eu acho que ganharam pela complexidade, e pelo trabalho que deve ter dado para normalizar aquela base que tinha <strong>muitos</strong> dados -- e bastante estranhos!</p>
<p>Eles citaram que pelo nível de complexidade das aplicações haveriam duas menções honrosas. Não sei se o apresentador se perdeu ou o que aconteceu, mas estou esperando até agora. Se você souber quem foram, por favor me dá um toque.</p>
<h2 id="e-fim">E Fim</h2>
<p>Infelizmente, uma hora tem que acabar... Foi muito bom! O melhor hackathon que eu já fui sem sombra de dúvidas, e vai demorar para algum outro mudar isso! Organização impecável, respeito com os maratonistas, só gente boa... Sinceramente, não tenho palavras para descrever.</p>
<p>Eu não participei pelos prêmios, tanto que quando me inscrevi nem sabia que eles existiam. Eu participei pela oportunidade de passar 24 horas programando com outras pessoas com a mesma vontade, e consegui! No último dia saí mais do que satisfeito de lá.</p>
<p>Disseram que esse era apenas o <strong>primeiro</strong> hackathon de Campinas. Que venham os próximos! Meus alerts no Google já estão ativos!</p>
]]></description>
            <link>https://danguilherme.github.io/blog/primeiro-hackathon-campinas/</link>
            <guid isPermaLink="true">https://danguilherme.github.io/blog/primeiro-hackathon-campinas/</guid>
            <dc:creator><![CDATA[[object Object]]]></dc:creator>
            <pubDate>Thu, 10 Mar 2016 02:50:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Chrome é Mesmo o Novo IE?]]></title>
            <description><![CDATA[<p>E aqui estamos nós, em 2016, ano que promete para nós, desenvolvedores web. ES6 (ES2015) veio com sua spec finalizada, flexbox com grande suporte pelos browsers, web components com sua spec cada vez mais redonda, e mais um <a href="https://tecnoblog.net/191438/chrome-novo-internet-explorer/">post comparando o pobre Internet Explorer com outro browser</a>. Antes de virar moda, já vou avisar aqui: ano que vem eu que posto!</p>
<p>Há pouco tempo atrás, surgiu um post com título um tanto quanto sensacionalista: <a href="http://nolanlawson.com/2015/06/30/safari-is-the-new-ie/">Safari é o novo IE</a>. O post gerou <a href="http://developer.telerik.com/featured/safari-is-not-the-new-ie-but/">muita</a> <a href="http://nolanlawson.com/2015/07/05/safari-is-the-new-ie-2-revenge-of-the-linkbait/">discussão</a> (muitas delas <a href="http://www.imore.com/safari-isnt-new-ie-its-user-centric-web">bem tendenciosas</a>), mas uma coisa foi boa: nos fez questionar. No fim, o Safari <a href="http://arstechnica.com/information-technology/2015/06/op-ed-safari-is-the-new-internet-explorer/?comments=1&amp;post=29304893">não estava <strong>tão fora da curva assim</strong></a>, mas agora a Apple sabe que estamos de olho, que queremos que as coisas andem. E isso é bom!</p>
<p>Infelizmente não vivi muito na época de domínio do Internet Explorer (não conheci o Netscape, me julguem). Sim, tive um Positivo com Internet Explorer, que vivia cheio daquelas barras de ferramentas de terceiros, que pra abrir uma página era bater na URL e ir tomar um café, mas isso foi por pouco mais de dois anos, e nessa época eu só ficava nos joguinhos da Miniclip, não produzia nada mesmo. Portanto, o que vou expor aqui é minha visão de como é a realidade dos navegadores hoje, do ponto de vista de um desenvolvedor.</p>
<h2 id="os-usu-rios-escolhem-navegar-pelo-chrome">Os Usuários Escolhem Navegar Pelo Chrome</h2>
<p>O primeiro ponto, o mais óbvio, é que os usuários do Chrome <strong>escolheram ser usuários do Chrome</strong>. Eles tiveram que baixar o navegador manualmente, não contaram com a comodidade de já tê-lo instalado em seu Sistema Operacional, que é o caso do IE e Safari (até o Firefox já vem no Ubuntu 14.04). Claro que o Chrome OS é um desses casos, mas convenhamos que ele não se encaixa como um SO convencional.</p>
<h2 id="desenvolvimento-diferente-de-produ-o">Desenvolvimento é Diferente de Produção</h2>
<p>Assim como beta é diferente de estável. Um serviço em beta, que era o caso do Inbox e Whatsapp Web, que funciona apenas em um navegador é completamente aceitável. Em casos notórios, como os já citados, a comunidade de desenvolvimento já cai em cima, justamente pra evitar esse esquema anti-cross-browser.</p>
<p>O Chrome é geralmente mais utilizado por desenvolvedores por ser um dos primeiros a implementar as specs, mesmo as que ainda estão em draft. Não é pelo fato de <strong>ser o Google Chrome</strong>, mas pelo fato dele suportar tal API. Além do mais, desenvolver no <a href="http://gs.statcounter.com/#browser-ww-monthly-201501-201601-bar" title="Gráfico de uso dos navegadores (imagem abaixo)">browser mais utilizado atualmente</a> é compreensível.</p>
<p><img src="/blog/chrome-novo-ie/browser-usage-chart.png" alt="Estatística de uso dos navegadores" title="Estatística de uso dos navegadores"></p>
<p>Infelizmente, suportar ou não outros browsers é uma decisão de negócio, e se a escolha é suportar um navegador específico (seja Chrome, Firefox, Edge ou Safari), essa é uma decisão bem ruim. A web é muito maior do que esses quatro podem suportar, sem contar que, suportando apenas um deles, uma grande parcela de seus possíveis usuários não será alcançada. É isso que os &quot;Open Web Standards&quot; buscam cumprir, uma plataforma unificada de desenvolvimento, com padrões e APIs bem documentadas, onde a gente possa desenvolver um único código que atenda qualquer user agent (mas a gente sabe que não é assim tão fácil, né?).</p>
<p>Eu, particularmente, uso o Chrome pela sua simplicidade e suas ferramentas de desenvolvimento. Não consigo usar os devtools do Firefox, já tentei e me perco todo naquilo. Não é por isso que não vou testar meus websites nele, a única diferença é que será com uma frequência menor, ou para testar alguma funcionalidade chave. Quem desenvolve para um browser <strong>específico</strong>, utilizando <a href="https://css-tricks.com/browser-detection-is-bad/">detecção de browser</a> ao invés de <a href="http://quirksmode.org/js/support.html">funcionalidade</a>, está fazendo algo muito errado, que vai gerar retrabalho num futuro próximo.</p>
<h2 id="uso-inadequado-de-apis-espec-ficas-do-browser">Uso Inadequado de APIs Específicas do Browser</h2>
<p>Pesquisando para esse post, descobri que a API de FileSystem, utilizada em todos os exemplos dados pelo Paulo Higa em seu post (exceto o Inbox), não é um padrão W3C:</p>
<blockquote>
<p>In April 2014, it was <a href="http://lists.w3.org/Archives/Public/public-webapps/2014AprJun/0010.html">announced on public-webapps</a> that the Filesystem API spec is not being considered by other browsers. For now, the API is Chrome-specific and it&#39;s unlikely to be implemented by other browsers and is no longer being standardized with the W3C.
<cite><a href="http://www.html5rocks.com/en/tutorials/file/filesystem/">Exploring the FileSystem APIs</a> por <a href="https://twitter.com/ebidel">Eric Bidelman</a></cite></p>
</blockquote>
<p>Ela virou uma API específica para o Chrome. A verdade é que o navegador é sim uma plataforma (vide Chrome OS) e além dessa, existe <a href="https://developer.chrome.com/extensions/api_index">toda uma lista</a> de APIs específicas, utilizadas pelas extensões e apps. O que nós, desenvolvedores, podemos fazer quanto a isso? Primeiramente, se a API é específica do browser, então o melhor é nem utilizar. Se for uma funcionalidade muito boa, me baseio nas opções que Nolan Lawson escreveu em <a href="http://nolanlawson.com/2015/06/30/safari-is-the-new-ie/">seu post</a>: eu escolheria <strong>desenvolver as funcionalidades com progressive enhancement</strong>. Upload de pastas é possível no Chrome mas não no Edge? Então faça um upload em lote no Edge então. Já se a escolha deve ser entre suportar ou não tal feature <strong>sem nenhum fallback</strong>, então que fiquemos com o upload em lote que funciona em todos os browsers.</p>
<p>A Microsoft agiu errado ao implementar o upload de pastas no OneDrive apenas no Chrome, que suporta isso? Absolutamente não! Se eles têm o tempo e recursos necessários para implementar tanto o upload de pastas onde é suportado e o upload em lote onde não é, que o faça, melhor para os usuários de ambos os browsers. Além disso, não é porque o Chrome suporta essa funcionalidade não endorsada pelo W3C que eles devem implementar também.</p>
<h2 id="conclus-o-habemus-bom-senso">Conclusão: Habemus Bom Senso</h2>
<p>Não adianta levantar um problema sem sugerir nenhuma solução. Tudo bem que isso está fora de nosso controle—não somos a Google—mas podemos fazer algo quanto a isso. Como desenvolvedores, podemos simplesmente não endorsar essas tecnologias não utilizando-as. Como usuários, podemos fazer como fizemos com o Whatsapp Web, mostrando aos desenvolvedores que <em>isso é feio</em> (isso mesmo, xingar muito no Twitter). Se seu website funciona apenas no Google Chrome, a culpa é sua, não dele.</p>
]]></description>
            <link>https://danguilherme.github.io/blog/chrome-novo-ie/</link>
            <guid isPermaLink="true">https://danguilherme.github.io/blog/chrome-novo-ie/</guid>
            <dc:creator><![CDATA[[object Object]]]></dc:creator>
            <pubDate>Mon, 22 Feb 2016 02:20:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Afinal, o que é o Polymer?]]></title>
            <description><![CDATA[<p>É muito comum nos depararmos com essa pergunta, seja em fóruns, grupos do Facebook e até eventos da área. Infelizmente, também é muito comum obtermos respostas vagas ou até mesmo equivocadas sobre ela. E quando essas respostas vão se espalhando como em um telefone sem fio o desentendimento fica ainda maior.</p>
<p>Esse artigo vai te dar a resposta exata do que o <a href="https://www.polymer-project.org/">Polymer</a> é e, principalmente, <strong>do que ele não é</strong>.</p>
<h2 id="1-ele-n-o-um-polyfill-para-a-tecnologia-dos-web-components">1. Ele não é um Polyfill Para a Tecnologia dos Web Components</h2>
<p><em>Web Components: O futuro da web</em>. Você já deve ter visto isso em muitos lugares, e com certeza o Polymer ou foi citado ou foi o assunto principal, e por isso muitas pessoas confundem.</p>
<p>Polymer é uma biblioteca que <strong>facilita</strong> a criação de <a href="http://tableless.com.br/web-components-introducao/">Web Components</a>, que são elementos HTML customizados, independentes e reutilizáveis.</p>
<p>O problema é que a especificação dessa tecnologia, que agrega <a href="http://w3c.github.io/webcomponents/spec/custom/">Custom Elements</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template">HTML Templates</a>, <a href="http://w3c.github.io/webcomponents/spec/shadow/">Shadow DOM</a> e <a href="http://w3c.github.io/webcomponents/spec/imports/">HTML Imports</a>, além de ser recente, ainda está em rascunho, não foi finalizada. Os browsers mais recentes (lê-se Google Chrome e Mozilla Firefox) suportam essa tecnologia experimentalmente sob uma flag, mas nossos usuários não terão (e nem devem ter) essas flags ativadas. E é aí que entra o verdadeiro polyfill: <a href="https://github.com/WebComponents/webcomponentsjs"><code>webcomponents.js</code></a>.</p>
<p>Esse é o cara responsável por trazer as funcionalidades descritas nas especificações para os browsers atuais. <strong><code>webcomponents.js</code> é o polyfill.</strong> Se você quiser criar componentes &quot;na unha&quot;, vai precisar dele pra usar as tecnologias enquanto elas não estiverem 100% disponíveis. O Polymer também precisa que ele esteja carregado para funcionar nos browsers atualmente (na verdade é uma versão menor dele, <code>webcomponents-lite.js</code>).</p>
<p>O Polymer tem foco em deixar a criação desses componentes customizados mais declarativa, <em>a la</em> HTML (afinal, é assim que fazemos com todos os outros elementos, né?), priorizando a expressividade com o <a href="https://pt.wikipedia.org/wiki/A%C3%A7%C3%BAcar_sint%C3%A1tico">açúcar sintático</a> que ele provê.</p>
<h3 id="sem-del-jequiti-del-polymer">Sem <del>Jequiti</del> Polymer</h3>
<pre class="highlight"><code class="hljs xml"><span class="hljs-comment">&lt;!-- Defines element markup --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> :)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">window, document, undefined</span>) </span>{
    <span class="hljs-comment">// Refers to the "importer", which is index.html</span>
    <span class="hljs-keyword">var</span> thatDoc = <span class="hljs-built_in">document</span>;

    <span class="hljs-comment">// Refers to the "importee", which is src/hello-world.html</span>
    <span class="hljs-keyword">var</span> thisDoc =  (thatDoc._currentScript || thatDoc.currentScript).ownerDocument;

    <span class="hljs-comment">// Gets content from &lt;template&gt;</span>
    <span class="hljs-keyword">var</span> template = thisDoc.querySelector(<span class="hljs-string">'template'</span>).content;

    <span class="hljs-comment">// Creates an object based in the HTML Element prototype</span>
    <span class="hljs-keyword">var</span> MyElementProto = <span class="hljs-built_in">Object</span>.create(HTMLElement.prototype);

    <span class="hljs-comment">// Creates the "who" attribute and sets a default value</span>
    MyElementProto.who = <span class="hljs-string">'World'</span>;

    <span class="hljs-comment">// Fires when an instance of the element is created</span>
    MyElementProto.createdCallback = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
        <span class="hljs-comment">// Creates the shadow root</span>
        <span class="hljs-keyword">var</span> shadowRoot = <span class="hljs-keyword">this</span>.createShadowRoot();

        <span class="hljs-comment">// Adds a template clone into shadow root</span>
        <span class="hljs-keyword">var</span> clone = thatDoc.importNode(template, <span class="hljs-literal">true</span>);
        shadowRoot.appendChild(clone);

        <span class="hljs-comment">// Caches &lt;strong&gt; DOM query</span>
        <span class="hljs-keyword">this</span>.strong = shadowRoot.querySelector(<span class="hljs-string">'strong'</span>);

        <span class="hljs-comment">// Checks if the "who" attribute has been overwritten</span>
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.hasAttribute(<span class="hljs-string">'who'</span>)) {
            <span class="hljs-keyword">var</span> who = <span class="hljs-keyword">this</span>.getAttribute(<span class="hljs-string">'who'</span>);
            <span class="hljs-keyword">this</span>.setWho(who);
        }
        <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">this</span>.setWho(<span class="hljs-keyword">this</span>.who);
        }
    };

    <span class="hljs-comment">// Fires when an attribute was added, removed, or updated</span>
    MyElementProto.attributeChangedCallback = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">attr, oldVal, newVal</span>) </span>{
        <span class="hljs-keyword">if</span> (attr === <span class="hljs-string">'who'</span>) {
            <span class="hljs-keyword">this</span>.setWho(newVal);
        }
    };

    <span class="hljs-comment">// Sets new value to "who" attribute</span>
    MyElementProto.setWho = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>{
        <span class="hljs-keyword">this</span>.who = val;

        <span class="hljs-comment">// Sets "who" value into &lt;strong&gt;</span>
        <span class="hljs-keyword">this</span>.strong.textContent = <span class="hljs-keyword">this</span>.who;
    };

    <span class="hljs-comment">// Registers &lt;hello-world&gt; in the main document</span>
    <span class="hljs-built_in">window</span>.MyElement = thatDoc.registerElement(<span class="hljs-string">'hello-world'</span>, {
        <span class="hljs-attr">prototype</span>: MyElementProto
    });
})(<span class="hljs-built_in">window</span>, <span class="hljs-built_in">document</span>);
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p><a href="https://github.com/webcomponents/hello-world-element/blob/master/hello-world.html">Elemento simples criado com Vanilla JS.</a></p>
<h3 id="com-polymer">Com Polymer</h3>
<pre class="highlight"><code class="hljs xml"><span class="hljs-comment">&lt;!-- Imports polymer --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"import"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"../polymer/polymer.html"</span>&gt;</span>

<span class="hljs-comment">&lt;!-- Defines element markup --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dom-module</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"hello-world"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{who}}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> :)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dom-module</span>&gt;</span>

<span class="hljs-comment">&lt;!-- Registers custom element --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">
Polymer({
    <span class="hljs-keyword">is</span>: <span class="hljs-string">'hello-world'</span>,
    properties: {
        who: {
            type: String,
            value: <span class="hljs-string">'World'</span>
        }
    }
});
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p><a href="https://github.com/webcomponents/hello-world-polymer/blob/master/hello-world.html">Mesmo elemento criado com Polymer.</a></p>
<p>De 65 para 22 linhas. Sem contar o two-way data-binding e a facilidade de leitura do código mais declarativo.</p>
<p>Existem outras bibliotecas que também têm como objetivo facilitar a criação de componentes, como <a href="http://x-tags.org/">X-Tags</a>, da Mozilla, e <a href="http://bosonic.github.io/">Bosonic</a>.</p>
<h2 id="2-ele-uma-biblioteca-n-o-um-framework">2. Ele é uma Biblioteca, não um Framework</h2>
<p>A discussão &quot;<a href="http://stackoverflow.com/q/148747/1574059">Biblioteca vs Framework</a>&quot;  é velha e confusa, por isso antes vou defini-las sob meu ponto de vista.</p>
<h3 id="diferen-a-entre-biblioteca-e-framework">Diferença Entre Biblioteca e Framework</h3>
<p>TL;DR:  </p>
<ul>
<li><strong>Biblioteca</strong>: você chama</li>
<li><strong>Framework</strong>: você é chamado</li>
</ul>
<p>Falando no contexto de código, bibliotecas contém funções (métodos, objetos, etc) para soluções de problemas específicos, e que podem ser chamadas como é quando precisarmos. Alguns exemplos são bibliotecas para manipulação de imagens, criação de PDFs ou para fazer requisições HTTP. Já os frameworks são um conjunto de bibliotecas baseadas em um conceito, um design, e seu código deve se adequar a ele (não o contrário). Podemos citar como exemplos <a href="https://angularjs.org/">Angular.js</a> e <a href="http://www.sencha.com/products/extjs/">Ext JS</a>.</p>
<p>Frameworks geralmente se encaixam no design pattern de <a href="https://pt.wikipedia.org/wiki/Invers%C3%A3o_de_controle">Inversão de Controle</a>.
Para saber mais, Martin Fowler tem <a href="http://martinfowler.com/bliki/InversionOfControl.html">um ótimo artigo</a> sobre isso.</p>
<h3 id="e-por-que-polymer-uma-biblioteca-">E por que Polymer é uma Biblioteca?</h3>
<p>Porque ele tem uma única e exclusiva função: facilitar a criação de Web Components. Só. Ele não vai se intrometer onde não é chamado e, quando você o chamar, vai fazer o que você pediu e nada mais.</p>
<h2 id="3-ele-n-o-um-framework-css-showcase-do-material-design">3. Ele não é um Framework CSS / Showcase do Material Design</h2>
<p>Apesar do <a href="https://www.polymer-project.org/">site do projeto</a> ser construído sobre a especificação do <a href="https://www.google.com/design/spec/material-design">Material Design</a>, também da Google, o Polymer não é &quot;o futuro Bootstrap&quot; (sim, eu já ouvi falarem isso). Bootstrap e Polymer não são nem comparáveis, mas a esse ponto você já deve saber o porquê: o primeiro é um framework CSS e o segundo, uma biblioteca JavaScript.</p>
<p>O que existem, na verdade, são <strong>elementos baseados no Material Design</strong>. Elementos customizados, criados com Polymer, como qualquer outro pode ser. Esses são chamados de <a href="https://www.polymer-project.org/0.5/components/paper-elements/demo.html"><code>paper-elements</code></a>, que são nada mais nada menos que extensões dos elementos base (<a href="https://www.polymer-project.org/0.5/components/core-elements/demo.html"><code>core-elements</code></a>) com estilos e animações diferenciados.</p>
<p>O website do projeto tem um <a href="https://elements.polymer-project.org/">catálogo</a> bem bacana com todos os elementos já disponíveis, e uma das categorias é justamente a dos Paper Elements. Outra fonte de elementos é o <a href="https://customelements.io/">customelements.io</a>, com elementos desenvolvidos por toda a comunidade. Com tudo isso, da próxima vez que você tiver que resolver um problema a primeira coisa que você vai pensar é <em>&quot;tem um elemento pra isso&quot;</em>!</p>
<hr>
<p>Bom, espero que isso tenha esclarecido um pouco as coisas. Vale muito a pena aprender como funciona e como utilizar os Web Components, com ou sem Polymer, eles realmente são o futuro da web.</p>
]]></description>
            <link>https://danguilherme.github.io/blog/o-que-realmente-e-o-google-polymer/</link>
            <guid isPermaLink="true">https://danguilherme.github.io/blog/o-que-realmente-e-o-google-polymer/</guid>
            <dc:creator><![CDATA[[object Object]]]></dc:creator>
            <pubDate>Tue, 30 Jun 2015 21:04:00 GMT</pubDate>
        </item>
    </channel>
</rss>