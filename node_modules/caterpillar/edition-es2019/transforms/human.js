"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Human = void 0;
const transform_js_1 = require("../transform.js");
const util_1 = require("util");
const ansi = __importStar(require("@bevry/ansi"));
/**
 * Return the given argument.
 * Used for when there is no formatter.
 */
function ansiNoop(a) {
    return a;
}
/**
 * Convert Logger entries into human readable format.
 * @extends Transform
 * @example
 * ``` javascript
 * import { Logger, Human } from 'caterpillar'
 * const logger = new Logger()
 * const human = new Human()
 * logger.pipe(human).pipe(process.stdout)
 * logger.log('info', 'some', {data: 'oh yeah'}, 42)
 * ```
 */
class Human extends transform_js_1.Transform {
    /** Create our instance and apply our configuration options. */
    constructor(opts) {
        super();
        /** Whether or not to use colors? */
        this.color = true;
        /** Mapping of which log level numbers correspond to which colours */
        this.colors = {
            '0': 'red',
            '1': 'red',
            '2': 'red',
            '3': 'red',
            '4': 'yellow',
            '5': 'yellow',
            '6': 'green',
            '7': 'green',
        };
        // options
        if ((opts === null || opts === void 0 ? void 0 : opts.color) != null)
            this.color = opts.color;
        if ((opts === null || opts === void 0 ? void 0 : opts.colors) != null)
            this.colors = opts.colors;
    }
    /** Get the color for the log level */
    getColor(levelNumber) {
        // Determine
        const color = this.colors[levelNumber] || false;
        // Return
        return color;
    }
    /** Pad the left of some content if need be with the specified padding to make the content reach a certain size */
    padLeft(padding, size, content) {
        // Prepare
        padding = String(padding);
        content = String(content);
        // Handle
        if (content.length < size) {
            for (let i = 0, n = size - content.length; i < n; ++i) {
                content = padding + content;
            }
        }
        // Return
        return content;
    }
    /** Convert logger entry arguments into a human readable string */
    formatArguments(args) {
        return args
            .map((value) => typeof value === 'string'
            ? value
            : util_1.inspect(value, {
                showHidden: false,
                depth: 10,
                colors: this.color,
            }))
            .join(' ');
    }
    /** Convert a datetime into a human readable format */
    formatDate(datetime) {
        // Prepare
        const now = new Date(datetime);
        const year = now.getFullYear();
        const month = this.padLeft('0', 2, now.getMonth() + 1);
        const date = this.padLeft('0', 2, now.getDate());
        const hours = this.padLeft('0', 2, now.getHours());
        const minutes = this.padLeft('0', 2, now.getMinutes());
        const seconds = this.padLeft('0', 2, now.getSeconds());
        const ms = this.padLeft('0', 3, now.getMilliseconds());
        // Apply
        const result = `${year}-${month}-${date} ${hours}:${minutes}:${seconds}.${ms}`;
        // Return
        return result;
    }
    /** Convert a logger entry into a human readable format */
    format(entry) {
        // Prepare
        const { color } = this;
        const useLine = entry.line !== -1;
        let result;
        // Format
        const format = {
            color: this.getColor(entry.levelNumber),
            timestamp: this.formatDate(entry.date),
            text: this.formatArguments(entry.args),
        };
        // Check
        if (format.text) {
            // Formatters
            const levelFormatter = (color && format.color && ansi[format.color]) || ansiNoop;
            const lineFormatter = (useLine && color && ansi.dim) || ansiNoop;
            // Message
            // @ts-ignore
            const levelString = levelFormatter(`${entry.levelName}:`);
            const entryString = format.text;
            const messageString = `${levelString} ${entryString}`;
            // Format
            if (useLine) {
                // Line Information
                const seperator = '\n    ';
                const debugString = lineFormatter(`â†’ [${format.timestamp}] [${entry.file}:${entry.line}:${entry.char}] [${entry.method}]`);
                // Result
                result = `${messageString}${seperator}${debugString}\n`;
            }
            else {
                // Result
                result = `${messageString}\n`;
            }
        }
        else {
            result = format.text;
        }
        // Return
        return result;
    }
}
exports.Human = Human;
exports.default = Human;
