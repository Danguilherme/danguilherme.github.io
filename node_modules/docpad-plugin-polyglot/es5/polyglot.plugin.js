// Generated by CoffeeScript 1.12.5
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = function(BasePlugin) {
  var PolyglotPlugin;
  return PolyglotPlugin = (function(superClass) {
    extend(PolyglotPlugin, superClass);

    function PolyglotPlugin() {
      return PolyglotPlugin.__super__.constructor.apply(this, arguments);
    }

    PolyglotPlugin.prototype.name = 'polyglot';

    PolyglotPlugin.prototype.config = {
      languages: null,
      mainLanguage: null,
      omitMainFolder: true
    };

    PolyglotPlugin.prototype.templateData = {
      date: function(opts) {
        var date, format, lang, moment;
        if (opts == null) {
          opts = {};
        }
        date = opts.date, lang = opts.lang, format = opts.format;
        if (date == null) {
          date = this.document.date;
        }
        if (lang == null) {
          lang = this.document.lang || this.defaultLanguage;
        }
        if (format == null) {
          format = 'LL';
        }
        moment = require('moment');
        moment.locale(lang);
        return moment(date).format(format);
      },
      toLang: function(lang) {
        if ((this.document.translationURLs != null) && (this.document.translationURLs[lang] != null)) {
          return this.getNewUrl(this.document.translationURLs[lang]);
        }
      },
      getNewUrl: function(oldUrl) {
        var match;
        match = this.getCollection('documents').findAll({
          origUrl: oldUrl
        });
        if (match.size() !== 1) {
          throw new Error("Expected to find 1 document with original URL " + oldUrl + " but got " + (match.size()));
        }
        return match.toJSON()[0].url;
      },
      hasLang: function(lang) {
        return (this.document.translationURLs != null) && (this.document.translationURLs[lang] != null);
      },
      otherLangs: function() {
        var lang, other, ref, url;
        other = {};
        ref = this.document.translationURLs;
        for (lang in ref) {
          url = ref[lang];
          if (lang !== this.document.lang) {
            other[lang] = this.getNewUrl(url);
          }
        }
        return other;
      },
      langFromUrl: function(url) {
        var match;
        match = this.getCollection('documents').findAll({
          url: url
        });
        if (match.size() > 0) {
          return match.models[0].get('lang');
        }
      }
    };

    PolyglotPlugin.prototype.extendTemplateData = function(opts) {
      var config, templateData;
      templateData = opts.templateData;
      config = this.config;
      this.log('debug', config);
      templateData = Object.assign(templateData, this.templateData);
      templateData.languages = config.languages;
      templateData.mainLanguage = config.mainLanguage;
      if (!this.checkRequiredConfigs()) {
        this.error(this.requiredConfigMissingError());
        return this;
      }
      return this;
    };

    PolyglotPlugin.prototype.extendCollections = function(opts) {
      var config, database, docpad, fn, i, lang, languages, len;
      config = this.getConfig();
      docpad = this.docpad;
      languages = config.languages;
      database = this.docpad.getDatabase();
      if (!this.checkRequiredConfigs()) {
        this.error(this.requiredConfigMissingError());
        return this;
      }
      fn = function(lang, docpad) {
        var otherLanguages, relativeDirPathCriteria;
        relativeDirPathCriteria = {
          $startsWith: lang
        };
        if (config.omitMainFolder && lang === config.mainLanguage) {
          otherLanguages = languages.filter(function(l) {
            return l !== config.mainLanguage;
          });
          relativeDirPathCriteria = new RegExp("^(?!" + (otherLanguages.join('|')) + "(\\\\|$))");
        }
        docpad.getCollection('documents').findAllLive({
          relativeDirPath: relativeDirPathCriteria
        }, [
          {
            date: -1
          }
        ]).on("add", function(model) {
          return model.setMetaDefaults({
            lang: lang
          });
        });
        return docpad.setCollection("lang_" + lang, database.createLiveChildCollection().setQuery("is_" + lang, {
          lang: lang
        }));
      };
      for (i = 0, len = languages.length; i < len; i++) {
        lang = languages[i];
        fn(lang, docpad);
      }
      return this;
    };

    PolyglotPlugin.prototype.generateBefore = function(opts) {
      var allDocs, config, d, docsCollection, documentUrl, i, j, k, l, lang, len, len1, len2, len3, len4, len5, m, n, o, prefix, ref, ref1, ref2, translationUrl, translationsMap;
      docsCollection = this.docpad.getCollection('html').findAll();
      allDocs = docsCollection.toJSON();
      config = this.config;
      translationsMap = {};
      for (i = 0, len = allDocs.length; i < len; i++) {
        d = allDocs[i];
        if (d.lang != null) {
          documentUrl = this.docUrl(d);
          translationsMap[documentUrl] = {};
          translationsMap[documentUrl][d.lang] = documentUrl;
        }
      }
      for (j = 0, len1 = allDocs.length; j < len1; j++) {
        d = allDocs[j];
        ref = config.languages;
        for (k = 0, len2 = ref.length; k < len2; k++) {
          l = ref[k];
          if (((d.translations != null) && (d.translations[l] != null)) && ((d.lang != null) && d.lang !== l)) {
            documentUrl = this.docUrl(d);
            translationUrl = '/' + l + '/' + d.translations[l];
            if (!(translationUrl in translationsMap)) {
              this.log('debug', translationsMap);
              this.error(documentUrl + " specifies a non-existing translation " + translationUrl);
            }
            if (translationsMap[documentUrl][l] != null) {
              this.error(documentUrl + " already has translation " + translationsMap[documentUrl][l] + " (trying to add " + translationUrl + "). Specified in " + documentUrl);
            }
            translationsMap[documentUrl][l] = translationUrl;
            if (translationsMap[translationUrl][d.lang] != null) {
              this.error(translationUrl + " already has translation " + translationsMap[translationUrl][d.lang] + " (trying to add " + documentUrl + "). Specified in " + documentUrl);
            }
            translationsMap[translationUrl][d.lang] = documentUrl;
          }
        }
      }
      for (m = 0, len3 = allDocs.length; m < len3; m++) {
        d = allDocs[m];
        ref1 = config.languages;
        for (n = 0, len4 = ref1.length; n < len4; n++) {
          l = ref1[n];
          if (d.lang !== l && (d.lang != null) && (l != null)) {
            documentUrl = this.docUrl(d);
            translationUrl = '/' + l + '/' + (this.noLanguagePath(d.lang, documentUrl));
            if (translationUrl in translationsMap) {
              if (translationsMap[documentUrl][l] != null) {
                if (translationsMap[documentUrl][l] !== translationUrl) {
                  this.error(documentUrl + " already has a translation " + translationsMap[documentUrl][l] + " when adding " + translationUrl);
                }
              } else {
                translationsMap[documentUrl][l] = translationUrl;
              }
            }
          }
        }
      }
      ref2 = docsCollection.models;
      for (o = 0, len5 = ref2.length; o < len5; o++) {
        d = ref2[o];
        if (!d.get('origUrl')) {
          d.set("origUrl", d.get("url"));
        }
        if (d.get("url") in translationsMap) {
          d.set("translationURLs", translationsMap[d.get("url")]);
          lang = d.get("lang");
          prefix = lang + "/";
          if (config.omitMainFolder && lang === config.mainLanguage) {
            prefix = '';
          }
          d.set("langPrefix", prefix);
        } else if (!d.has("lang")) {
          d.set("lang", "");
        }
      }
      this.log('debug', translationsMap);
      return this;
    };

    PolyglotPlugin.prototype.noLanguagePath = function(lang, path) {
      var config, pathIndex;
      config = this.getConfig();
      pathIndex = 2;
      if (lang === config.mainLanguage && config.omitMainFolder) {
        pathIndex = 1;
      }
      return path.split('/').slice(pathIndex).join('/');
    };

    PolyglotPlugin.prototype.docUrl = function(document) {
      return document.origUrl || document.url;
    };

    PolyglotPlugin.prototype.error = function(msg) {
      if (msg instanceof Error) {
        msg = msg.message;
      }
      return this.docpad.error("Polyglot: " + (JSON.stringify(msg)));
    };

    PolyglotPlugin.prototype.log = function(type, message) {
      return this.docpad.log(type, "Polyglot: " + (JSON.stringify(message, null, 2)));
    };

    PolyglotPlugin.prototype.requiredConfigMissingError = function() {
      return new Error("Configs 'mainLanguage' and 'languages' are mandatory");
    };

    PolyglotPlugin.prototype.checkRequiredConfigs = function() {
      var config;
      config = this.getConfig();
      return config.mainLanguage && (config.languages && config.languages.length);
    };

    return PolyglotPlugin;

  })(BasePlugin);
};
