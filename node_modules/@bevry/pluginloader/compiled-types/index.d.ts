/// <reference types="node" />
import Errlop from 'errlop'
/** Log method */
declare type Log = Function
/** Validated against {@link PluginLoader#keyword} */
declare type Keywords = string[]
/** A map of items to their version numbers */
declare type Versions = {
	[item: string]: string | number
}
/** A map of itemsto their version ranges  */
declare type Ranges = {
	[item: string]: string
}
/** Validated against `process.platform` */
declare type Platforms = string[]
/** The package.json data required for {@link PluginLoader} */
interface PackageData {
	name: string
	keywords: Keywords
	platforms: Platforms
	/** Validated against `process.versions` */
	engines: Partial<NodeJS.ProcessVersions>
	/** Validated against {@link PluginLoader#versions} */
	peerDependencies: Ranges
}
/**
 * Receive the BasePlugin class and return a class that extended it.
 * @example
 * module.exports = (BasePlugin) => class MyPlugin extends BasePlugin {}
 */
declare type BasePluginResolver<BasePlugin> = (
	BasePlugin: BasePlugin
) => BasePlugin
interface PluginLoaderOptions<BasePlugin> {
	/** used to set {@link PluginLoader#BasePlugin} */
	BasePlugin: BasePlugin
	/** used to output debug messages if it exists */
	log?: Log
	/** used to set {@link PluginLoader#keyword} */
	keyword?: string
	/** used to set {@link PluginLoader#prefix} */
	prefix?: string
	/** used to set {@link PluginLoader#versions} */
	versions?: {
		[key: string]: string
	}
	/** used to set {@link PluginLoader#pluginPath} */
	pluginPath?: string
	/** used to set {@link PluginLoader#packageData} */
	packageData?: Partial<PackageData>
	/** used to set {@link PluginLoader#PluginClass} */
	PluginClass?: BasePlugin | BasePluginResolver<BasePlugin>
}
/** The Plugin Loader class */
export default class PluginLoader<BasePlugin> {
	/** A method, that if specified, will be used to output debug messages. */
	log: Log
	/** A keyword, that if specified then the `keywords` field of {@link PluginLoader#packageData} must contain. */
	keyword?: string
	/** A prefix, that if specified then the `name` field of {@link PluginLoader#packageData} must begin with. */
	prefix?: string
	/** A version map, that if specified then the `peerDependencies` field of {@link PluginLoader#packageData} must validate against. */
	versions: Versions
	/** The Base Plugin class that {@link PluginLoader#PluginClass} must inherit from. */
	BasePlugin: BasePlugin
	/**
	 * The absolute path to the plugin's directory.
	 * Can be omitted, if {@link PluginLoader#packageData} and {@link PluginLoader#PluginClass} are specified manually.
	 */
	pluginPath?: string
	/**
	 * An object of the essential plugin `package.json` properties.
	 * If not specified, then it is the loaded data from the `package.json` file inside {@link PluginLoader#pluginPath}.
	 */
	packageData: PackageData
	/**
	 * The plugin name. It is resolved by:
	 * 1. Loading the `name` field of {@link PluginLoader#packageData}.
	 * 2. If {@link PluginLoader#prefix} is defined, verify the string starts with the prefix, then trim the prefix.
	 * 3. Ensure the remaining string is alphanumeric only, to avoid common naming problems.
	 */
	readonly pluginName: string
	/**
	 * The Plugin Class.
	 * If not specified, then it is resolved by requiring {@link PluginLoader#pluginPath}.
	 */
	PluginClass: BasePlugin
	constructor(opts: PluginLoaderOptions<BasePlugin>)
	/**
	 * Alternative means for creating a {@link PluginLoader} instance.
	 */
	static create<BasePlugin>(
		opts: PluginLoaderOptions<BasePlugin>
	): PluginLoader<BasePlugin>
	/**
	 * Resolve the input as the plugin class
	 * @throws {Errlop} resolve failure reason
	 */
	protected resolve(
		direct: BasePlugin | BasePluginResolver<BasePlugin>
	): BasePlugin
	/**
	 * Check if this plugin is supported
	 * @returns supported
	 * @throws {Errlop} supported failure reason
	 */
	protected validate(): boolean
	/** Helper for creating Errlop instances against the plugin. */
	protected error(message: string, parent?: Error): Errlop
	/**
	 * Instantiate the {@link PluginLoader#PluginClass} with the arguments.
	 * @param {...*} arguments to forward to the plugin class constructor
	 * @returns {BasePlugin} the instantiation result
	 * @throws {Errlop} instantiation failure reason
	 */
	create<Args extends any[]>(...args: Args): any
}
export {}
//# sourceMappingURL=index.d.ts.map
