// Generated by CoffeeScript 2.5.1
  // Prepare
var TaskGroup, pathUtil, rimraf, safefs, safeps,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } },
  indexOf = [].indexOf;

safeps = require('safeps');

rimraf = require('rimraf');

pathUtil = require('path');

safefs = require('safefs');

({TaskGroup} = require('taskgroup'));

// Export
module.exports = function(BasePlugin) {
  var GhpagesPlugin;
  return GhpagesPlugin = (function() {
    // Define
    class GhpagesPlugin extends BasePlugin {
      constructor() {
        super(...arguments);
        // Do the Deploy
        this.deployToGithubPages = this.deployToGithubPages.bind(this);
        // =============================
        // Events

        // Console Setup
        this.consoleSetup = this.consoleSetup.bind(this);
      }

      deployToGithubPages(next) {
        var config, docpad, opts, outPath, rootPath, tasks;
        boundMethodCheck(this, GhpagesPlugin);
        // Prepare
        docpad = this.docpad;
        config = this.getConfig();
        outPath = docpad.getPath('out');
        rootPath = docpad.getPath('root');
        opts = {};
        // Log
        docpad.log('info', 'Deployment to GitHub Pages starting...');
        // Tasks
        tasks = new TaskGroup().done(next);
        // Check paths
        tasks.addTask(function(complete) {
          var err;
          // Check
          if (outPath === rootPath) {
            err = new Error("Your outPath configuration has been customised. Please remove the customisation in order to use the GitHub Pages plugin");
            return next(err);
          }
          // Apply
          opts.outGitPath = pathUtil.join(outPath, '.git');
          // Complete
          return complete();
        });
        // Check environment
        tasks.addTask(function(complete) {
          var err, ref;
          // Check
          if (ref = config.environment, indexOf.call(docpad.getEnvironments(), ref) < 0) {
            err = new Error(`Please run again using: docpad deploy-ghpages --env ${config.environment}`);
            return next(err);
          }
          // Complete
          return complete();
        });
        // Remove the out git repo if it exists
        tasks.addTask(function(complete) {
          docpad.log('debug', 'Removing old ./out/.git directory..');
          return rimraf(opts.outGitPath, complete);
        });
        // Generate the static environment to out
        tasks.addTask(function(complete) {
          if (process.argv.indexOf('--no-generate') !== -1) {
            docpad.log('debug', 'Skipping static generation...');
            return complete();
          } else {
            docpad.log('debug', 'Performing static generation...');
            return docpad.action('generate', complete);
          }
        });
        // Add a .nojekyll file
        tasks.addTask(function(complete) {
          docpad.log('debug', 'Disabling jekyll...');
          return safefs.writeFile(pathUtil.join(outPath, '.nojekyll'), '', complete);
        });
        // Fetch the project's remote url so we can push to it in our new git repo
        tasks.addTask(function(complete) {
          docpad.log('debug', `Fetching the URL of the ${config.deployRemote} remote...`);
          return safeps.spawn(['git', 'config', `remote.${config.deployRemote}.url`], {
            cwd: rootPath
          }, function(err, stdout, stderr) {
            if (err) {
              // Error?
              return complete(err);
            }
            // Extract
            opts.remoteRepoUrl = stdout.toString().replace(/\n/, "");
            // Complete
            return complete();
          });
        });
        // Fetch the last log so we can add a meaningful commit message
        tasks.addTask(function(complete) {
          docpad.log('debug', 'Fetching log messages...');
          return safeps.spawn(['git', 'log', '--oneline'], {
            cwd: rootPath
          }, function(err, stdout, stderr) {
            if (err) {
              // Error?
              return complete(err);
            }
            // Extract
            opts.lastCommit = stdout.toString().split('\n')[0];
            // Complete
            return complete();
          });
        });
        // Initialize a git repo inside the out directory and push it to the deploy branch
        tasks.addTask(function(complete) {
          var gitCommands;
          docpad.log('debug', 'Performing push...');
          gitCommands = [
            ['git',
            'init'],
            [
              'git',
              'add',
              '--all',
              '--force' // make sure we add absoutely everything in the out directory, even files that could be ignored by our global ignore file (like bower_components)
            ],
            ['git',
            'commit',
            '-m',
            opts.lastCommit],
            ['git',
            'push',
            '--quiet',
            '--force',
            opts.remoteRepoUrl,
            `master:${config.deployBranch}`]
          ];
          return safeps.spawnMultiple(gitCommands, {
            cwd: outPath,
            stdio: 'inherit'
          }, function(err) {
            if (err) {
              // Error?
              return complete(err);
            }
            // Log
            docpad.log('info', 'Deployment to GitHub Pages completed successfully');
            // Complete
            return complete();
          });
        });
        // Now that deploy is done, remove the out git repo
        tasks.addTask(function(complete) {
          docpad.log('debug', 'Removing new ./out/.git directory..');
          return rimraf(opts.outGitPath, complete);
        });
        // Start the deployment
        tasks.run();
        return this;
      }

      consoleSetup(opts) {
        var commander, config, consoleInterface, docpad;
        boundMethodCheck(this, GhpagesPlugin);
        // Prepare
        docpad = this.docpad;
        config = this.getConfig();
        ({consoleInterface, commander} = opts);
        // Deploy command
        commander.command('deploy-ghpages').description(`Deploys your ${config.environment} website to the ${config.deployRemote}/${config.deployBranch} branch`).action(consoleInterface.wrapAction(this.deployToGithubPages));
        return this;
      }

    };

    // Name
    GhpagesPlugin.prototype.name = 'ghpages';

    // Config
    GhpagesPlugin.prototype.config = {
      deployRemote: 'origin',
      deployBranch: 'gh-pages',
      environment: 'static'
    };

    return GhpagesPlugin;

  }).call(this);
};
