---
title:    Apresentando: Spotivy!
tagline:  Baixando playlists do Spotify como vídeos
tags:     open-source spotify videos
date:     2017-10-03T02:00:00+00:00
isDraft:  true
---

Há um tempo atrás eu comprei um carro. Na negociação, fiquei com o aparelho de som. O aparelho tinha DVD embutido, então eu pensei: "pra que ouvir músicas se eu posso ouvir **e** ver?".

Lembrando que era um aparelho de som *em um carro*.

# Nasce o Spotivy

Procurando maneiras de baixar as músicas de maneira fácil, encontrei uma extensão aqui, um utilitário ali, mas nenhum deles conseguia fazer o trabalho completo. Ou encontravam arquivos zoados, ou era muito manual. Como eu queria algo para fazer o download **em lote** (todas as músicas de todas as playlists de uma vez), não encontrei nada que suprisse minhas necessidades. Então decidi construir o meu próprio script.

# Introdução

O [Spotivy](https://github.com/danguilherme/spotivy) é um programa de linha de comando escrito em JavaScript (Node.js).
Por isso, para usá-lo você deve ter o [Node instalado](https://nodejs.org/en/download/) (qualquer versão acima da v6 está ótima).


Com tudo certo, é só instalar o programa globalmente:
```bash
npm install --global spotivy
```

Após a instalação, você já pode verificar os possíveis comando pela ajuda do programa:
```bash
spotivy help
```

## Baixar Música

Para baixar uma única música do Spotify, é só passar o **id** da mesma para o comando `track`:
```bash
spotivy track <track_id>
```

Vamos dizer que queremos baixar [The Trick The Devil Did](https://open.spotify.com/track/1SnIhFaGRO3RXy6tErg2aU), de Sick Puppies.
Precisamos seguir os seguintes passos:
1. No Spotify, pego o link da música: <code>open.spotify.com/track/<strong>1SnIhFaGRO3RXy6tErg2aU</strong></code> (é só ir em `Compartilhar > Copiar Link da Música`)
1. Desse link conseguimos o id, marcado acima
1. Então é só fazer o download:
    ```bash
spotivy track 1SnIhFaGRO3RXy6tErg2aU
    ```

Isso vai baixar o video da música do YouTube - um arquivo `.mp4`.
Se quiser salvar como áudio, é só passar a flag `--audio` para o programa que ele baixará como `.mp3`.

Também é possível baixar mais de uma música de uma vez:
```bash
spotivy track 1SnIhFaGRO3RXy6tErg2aU 0lxnk5Fpvhr47m3MFsgFzQ 04zkiHm6WkDZ0eOx3D9oyD --audio
```

O comando acima baixará 3 músicas no formato `.mp3`.

## Baixar Playlist

Bom, a ideia ainda era baixar as coisas em lote, e música por música fica inviável, mesmo podendo baixar várias de uma vez.

Para baixar uma playlist completa, utilizamos o comando `playlist` enviando o **id do dono da playlist** e o **id da playlist**:
```bash
spotivy playlist <user_id> <playlist_id>
```

Agora queremos baixar a playlist "[Pop virou Clássico](https://open.spotify.com/user/spotify/playlist/37i9dQZF1DWTsQAU8k2LN7)", do próprio Spotify.
Os passos para baixar uma playlist são parecidos com o que fizemos para baixar uma música:
1. Obtenha o link de compartilhamento: <code>open.spotify.com/user/<strong>spotify</strong>/playlist/<strong>37i9dQZF1DWTsQAU8k2LN7</strong></code> (`Compartilhar > Copiar Link da Playlist`)
1. Desse link conseguimos o id tanto do usuário quanto da playlist, ambos marcados acima
1. E então é só fazer o download:
    ```bash
spotivy playlist spotify 37i9dQZF1DWTsQAU8k2LN7
    ```

Esse comando vai baixar todas as músicas que existem nessa playlist.

Também é possível baixar mais de uma playlist de uma vez:
```bash
spotivy playlist spotify 37i9dQZF1DWTsQAU8k2LN7 37i9dQZF1DXcBWIGoYBM5M 37i9dQZF1DWV1Nj8a6volf --audio
```

Esse comando vai baixar três playlists, todas as músicas em `.mp3`.

-----

É isso. Se quiser usar o utilitário, isso é tudo que você precisa saber.
Se tiver qualquer problema fazendo a configuração ou usando os comandos,
pode abrir [uma issue no GitHub](https://github.com/danguilherme/spotivy/issues)
ou [me contatar pessoalmente](https://twitter.com/danguilherme/).

Abaixo vou passar com mais detalhes a implementação do programa e
explanar algumas das decisões feitas.

# Por Baixo dos Panos

O funcionamento do programa é bem simples, já que o problema que eu queria solucionar também era bem simples.
O que é necessário para baixar uma playlist é:

1. Encontrar as músicas que estão contidas nessa playlist
1. Encontrar o vídeo correspondente no YouTube - em ótima qualidade, de preferência
1. Baixar o vídeo na resolução adequada para uma pasta no sistema

De cara, não parece tão simples (ainda mais com download de arquivo envolvido).
Se eu fosse implementar todo o código para cada etapa eu nem teria começado.
Ainda bem que vivemos em um mundo com código aberto (amém GitHub).

Para buscar as músicas existentes em uma playlist, utilizei o projeto [spotify-web-api-node](https://github.com/thelinmichael/spotify-web-api-node).
É um wrapper bem completo que expõe os endpoints da API do Spotify como simples funções, com promise e tudo. Sucesso!

Para encontrar o vídeo perfeito para ser baixado, utilizo [outro wrapper](https://github.com/IonicaBizau/youtube-api) para a API do YouTube.

Para baixar o vídeo, utilizo a biblioteca [node-ytdl-core](https://github.com/fent/node-ytdl-core), que me permite passar alguns parâmetros antes do download,
como a qualidade que eu quero ou se eu quero baixar somente a faixa de áudio do arquivo.

## Encontrando Vídeo de Qualidade

Para encontrar o vídeo a ser baixado, é feita uma simples busca com **nome do artista** + **nome da música**.
Nisso pode aparecer muita coisa zoada, principalmente vídeos feitos por fãs. Nada contra vídeos feitos por fãs, mas nem sempre a qualidade é a melhor.

Digamos que quero buscar The Trick the Devil Did, de Sick Puppies, novamente. Esse seria o resultado da busca:

<figure>
  ![Resultados da busca no YouTube para "Sick Puppies - The Trick The Devil Did"](<%= @blog.getPostContent(@document, "busca-sick-puppies.png") %>)
  <figcaption>Resultados da busca no YouTube para "Sick Puppies - The Trick The Devil Did"</figcaption>
</figure>

Após alguns testes, fica claro que os resultados de canais afiliados à VEVO ficam na primeira página (na maioria das vezes são o primeiro resultado, como no print).
Por isso, [coloquei no código](https://github.com/danguilherme/spotivy/blob/v0.4.2/youtube_search.js#L76-L80) para filtrar resultados que são de canais da VEVO ou de "vídeos oficiais".
Chamo de "vídeos oficiais" aqueles que têm "official" no título ou no nome do canal. É preciso? Não. Mas dá pro gasto.

## Utilizando Streams

Me fascinei por streams e seus usos depois [do vídeo](https://www.youtube.com/watch?v=UD2dZw9iHCc) do [@mpjme](https://twitter.com/mpjme). A ideia de fazer as coisas em pedaços, assim que os recursos estão disponíveis, fazendo tarefas menores e mais rápidas faz muito sentido.

Na versão inicial do script, uma playlist era baixada completamente antes que suas músicas pudessem ser baixadas. Isso significa que para baixar uma playlist com 120 músicas, por exemplo, a aplicação fazia o download da informação de todas as 120 músicas, página por página, para depois fazer a busca e download dos 120 vídeos. Ilustrando:
- busca página 1 (20/120)
- busca página 2 (40/120)
- busca página 3 (60/120)
- busca página 4 (80/120)
- busca página 5 (100/120)
- busca página 6 (120/120)
- download vídeo 1
- download vídeo 2
- download vídeo 3
- ...

Com streams, podemos fazer o download dos vídeos sob demanda, assim que uma página com informação das músicas forem baixadas. Ilustrando:
- busca página 1 (20/120)
- download vídeo 1
- download vídeo 2
- ...
- download vídeo 19
- download vídeo 20
- busca página 2 (40/120)
- download vídeo 21
- download vídeo 22
- ...

Apesar do **tempo de download ser o mesmo** no final de tudo, a **sensação de fluidez** é inquestionável. E caramba, não é exatamente assim que a gente faz na web? Incrível!

A maior parte da mágica está no [código de paginação](https://github.com/danguilherme/spotivy/blob/v0.4.2/spotify.js#L75-L76) da busca no Spotify mesmo.

---