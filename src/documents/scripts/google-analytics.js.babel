danguilherme(function gaOnDocumentReady() {
  const DEBUG = false;

  // Para testar o Google Analytics em tempo real,
  // tem que entrar o IP de localhost (127.0.0.1)
  // - 'localhost' está na black list do Google Analytics, pra não sujar os dados reais
  const POST_SELECTOR = '#blog-post';
  const DEMO_SELECTOR = '#demo';

  function init() {
    configureLinksClickTracking();
    console.info('google-analytics loaded...');
  }

  function configureLinksClickTracking() {
    var blogPostTrackableLinks = els2array(document.querySelectorAll(`${POST_SELECTOR} a`));
    blogPostTrackableLinks.forEach(el => {
      el.addEventListener('click', createLinkTrackCallback({
        category: 'blog-post',
        action: 'link-click',
        label: 'post-link'
      }));
    });

    var demoPostTrackableLinks = els2array(document.querySelectorAll(`${DEMO_SELECTOR} a`));
    demoPostTrackableLinks.forEach(el => {
      el.addEventListener('click', createLinkTrackCallback({
        category: 'demo',
        action: 'link-click',
        label: 'demo-link'
      }));
    });

    var siteTrackableLinks = els2array(
      document.querySelectorAll(`[data-ga-category], [data-ga-action], [data-ga-label], a`)
    );
    siteTrackableLinks
      .filter(el => blogPostTrackableLinks.indexOf(el) === -1)
      .filter(el => demoPostTrackableLinks.indexOf(el) === -1)
      .forEach(el => {
        el.addEventListener('click', createLinkTrackCallback({
          category: 'website',
          action: 'link-click',
          label: undefined
        }));
      });
  }

  function createLinkTrackCallback(defaults) {
    return function onLinkTrackedActionHappens(event) {
      let anchor = event.currentTarget;
      let label = anchor.dataset.gaLabel || anchor.href || defaults.label;

      if(anchor.dataset.gaUseTextAsLabel !== undefined)
        label = anchor.innerText.trim();

      ga('send', 'event',
        anchor.dataset.gaCategory || defaults.category,
        anchor.dataset.gaAction || defaults.action,
        label);

      if (DEBUG)
      // Use a extensão Google Analytics Debugger
        event.preventDefault();
    };
  }

  function els2array(elementsArray) {
    return Array.prototype.slice.call(elementsArray);
  }

  init();
});